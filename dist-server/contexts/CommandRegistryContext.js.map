{"version":3,"file":"CommandRegistryContext.js","sourceRoot":"","sources":["../../src/contexts/CommandRegistryContext.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { createContext, useCallback, useContext, useMemo, useState } from \"react\";\n\nexport interface CommandAction {\n  id: string;\n  title: string;\n  subtitle?: string;\n  section: string; // grouping label\n  keywords?: string[];\n  shortcutHint?: string; // display-only hint (e.g., âŒ˜P)\n  icon?: React.ReactNode;\n  visible?: () => boolean;\n  enabled?: () => boolean;\n  run: () => void | Promise<void>;\n  prompt?: {\n    title?: string;\n    fields: Array<\n      | {\n          type: \"text\";\n          name: string;\n          label?: string;\n          placeholder?: string;\n          initialValue?: string;\n          getInitialValue?: (values: Record<string, string>) => string;\n          validate?: (v: string) => string | null;\n        }\n      | {\n          type: \"select\";\n          name: string;\n          label?: string;\n          placeholder?: string;\n          getOptions: (values: Record<string, string>) => Array<{\n            id: string;\n            label: string;\n            keywords?: string[];\n          }>;\n        }\n    >;\n    onSubmit: (values: Record<string, string>) => void | Promise<void>;\n  };\n}\n\nexport type CommandSource = () => CommandAction[];\n\ninterface CommandRegistryContextValue {\n  isOpen: boolean;\n  open: () => void;\n  close: () => void;\n  toggle: () => void;\n  registerSource: (source: CommandSource) => () => void;\n  getActions: () => CommandAction[];\n  addRecent: (actionId: string) => void;\n  recent: string[];\n}\n\nconst CommandRegistryContext = createContext<CommandRegistryContextValue | null>(null);\n\nexport function useCommandRegistry(): CommandRegistryContextValue {\n  const ctx = useContext(CommandRegistryContext);\n  if (!ctx) throw new Error(\"useCommandRegistry must be used within CommandRegistryProvider\");\n  return ctx;\n}\n\nconst RECENT_STORAGE_KEY = \"commandPalette:recent\";\n\nexport const CommandRegistryProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [sources, setSources] = useState<Set<CommandSource>>(new Set());\n  const [recent, setRecent] = useState<string[]>(() => {\n    try {\n      const raw = localStorage.getItem(RECENT_STORAGE_KEY);\n      const parsed = raw ? (JSON.parse(raw) as string[]) : [];\n      return Array.isArray(parsed) ? parsed.slice(0, 20) : [];\n    } catch {\n      return [];\n    }\n  });\n\n  const persistRecent = useCallback((next: string[]) => {\n    setRecent(next);\n    try {\n      localStorage.setItem(RECENT_STORAGE_KEY, JSON.stringify(next.slice(0, 20)));\n    } catch {\n      /* ignore persistence errors */\n    }\n  }, []);\n\n  const addRecent = useCallback(\n    (actionId: string) => {\n      // Move to front, dedupe\n      const next = [actionId, ...recent.filter((id) => id !== actionId)].slice(0, 20);\n      persistRecent(next);\n    },\n    [recent, persistRecent]\n  );\n\n  const open = useCallback(() => setIsOpen(true), []);\n  const close = useCallback(() => setIsOpen(false), []);\n  const toggle = useCallback(() => setIsOpen((v) => !v), []);\n\n  const registerSource = useCallback((source: CommandSource) => {\n    setSources((prev) => new Set(prev).add(source));\n    return () =>\n      setSources((prev) => {\n        const copy = new Set(prev);\n        copy.delete(source);\n        return copy;\n      });\n  }, []);\n\n  const getActions = useCallback(() => {\n    const all: CommandAction[] = [];\n    for (const s of sources) {\n      try {\n        const actions = s();\n        for (const a of actions) {\n          if (a.visible && !a.visible()) continue;\n          all.push(a);\n        }\n      } catch (e) {\n        console.error(\"Command source error:\", e);\n      }\n    }\n    return all;\n  }, [sources]);\n\n  const value = useMemo(\n    () => ({ isOpen, open, close, toggle, registerSource, getActions, addRecent, recent }),\n    [isOpen, open, close, toggle, registerSource, getActions, addRecent, recent]\n  );\n\n  return (\n    <CommandRegistryContext.Provider value={value}>{children}</CommandRegistryContext.Provider>\n  );\n};\n"]}