{"version":3,"file":"propose_plan.js","sourceRoot":"","sources":["../../../src/services/tools/propose_plan.ts"],"names":[],"mappings":";;;AAAA,2BAA0B;AAE1B,mEAAiE;AAEjE;;;;GAIG;AACI,MAAM,qBAAqB,GAAgB,GAAG,EAAE;IACrD,OAAO,IAAA,SAAI,EAAC;QACV,WAAW,EAAE,kCAAgB,CAAC,YAAY,CAAC,WAAW;QACtD,WAAW,EAAE,kCAAgB,CAAC,YAAY,CAAC,MAAM;QACjD,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE;YAC3B,2CAA2C;YAC3C,4EAA4E;YAC5E,OAAO,OAAO,CAAC,OAAO,CAAC;gBACrB,OAAO,EAAE,IAAI;gBACb,KAAK;gBACL,IAAI;gBACJ,OAAO,EAAE,2CAA2C;aACrD,CAAC,CAAC;QACL,CAAC;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAfW,QAAA,qBAAqB,yBAehC","sourcesContent":["import { tool } from \"ai\";\nimport type { ToolFactory } from \"@/utils/tools/tools\";\nimport { TOOL_DEFINITIONS } from \"@/utils/tools/toolDefinitions\";\n\n/**\n * Propose plan tool factory for AI assistant\n * Creates a tool that allows the AI to propose a plan for approval before execution\n * @param config Required configuration (not used for this tool, but required by interface)\n */\nexport const createProposePlanTool: ToolFactory = () => {\n  return tool({\n    description: TOOL_DEFINITIONS.propose_plan.description,\n    inputSchema: TOOL_DEFINITIONS.propose_plan.schema,\n    execute: ({ title, plan }) => {\n      // Tool execution is a no-op on the backend\n      // The plan is displayed in the frontend and user decides whether to approve\n      return Promise.resolve({\n        success: true,\n        title,\n        plan,\n        message: \"Plan proposed. Waiting for user approval.\",\n      });\n    },\n  });\n};\n"]}