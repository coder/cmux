{"version":3,"file":"compact_summary.js","sourceRoot":"","sources":["../../../src/services/tools/compact_summary.ts"],"names":[],"mappings":";;;AAAA,2BAA0B;AAE1B,mEAAiE;AAEjE;;;;GAIG;AACI,MAAM,wBAAwB,GAAgB,GAAG,EAAE;IACxD,OAAO,IAAA,SAAI,EAAC;QACV,WAAW,EAAE,kCAAgB,CAAC,eAAe,CAAC,WAAW;QACzD,WAAW,EAAE,kCAAgB,CAAC,eAAe,CAAC,MAAM;QACpD,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;YACvB,2CAA2C;YAC3C,yEAAyE;YACzE,OAAO,OAAO,CAAC,OAAO,CAAC;gBACrB,OAAO,EAAE,IAAI;gBACb,OAAO;gBACP,OAAO,EAAE,iCAAiC;aAC3C,CAAC,CAAC;QACL,CAAC;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAdW,QAAA,wBAAwB,4BAcnC","sourcesContent":["import { tool } from \"ai\";\nimport type { ToolFactory } from \"@/utils/tools/tools\";\nimport { TOOL_DEFINITIONS } from \"@/utils/tools/toolDefinitions\";\n\n/**\n * Compact summary tool factory for context compaction\n * Creates a tool that allows the AI to provide a conversation summary\n * @param config Required configuration (not used for this tool, but required by interface)\n */\nexport const createCompactSummaryTool: ToolFactory = () => {\n  return tool({\n    description: TOOL_DEFINITIONS.compact_summary.description,\n    inputSchema: TOOL_DEFINITIONS.compact_summary.schema,\n    execute: ({ summary }) => {\n      // Tool execution is a no-op on the backend\n      // The summary is intercepted by the frontend and used to replace history\n      return Promise.resolve({\n        success: true,\n        summary,\n        message: \"Summary generated successfully.\",\n      });\n    },\n  });\n};\n"]}