{"version":3,"file":"log.js","sourceRoot":"","sources":["../../src/services/log.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Pipe-safe logging utilities for cmux\n *\n * These functions wrap console.log/error with EPIPE protection to prevent\n * crashes when stdout/stderr pipes are closed (e.g., when piping to head/tail).\n *\n * They also prefix log messages with the caller's file path and line number\n * for easier debugging.\n */\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { defaultConfig } from \"@/config\";\n\nconst DEBUG_OBJ_DIR = path.join(defaultConfig.rootDir, \"debug_obj\");\n\n/**\n * Check if debug mode is enabled\n */\nfunction isDebugMode(): boolean {\n  return !!process.env.CMUX_DEBUG;\n}\n\n/**\n * Get the caller's file path and line number from the stack trace\n * Returns format: \"path/to/file.ts:123\"\n */\nfunction getCallerLocation(): string {\n  const error = new Error();\n  const stack = error.stack?.split(\"\\n\");\n\n  // Stack trace format:\n  // 0: \"Error\"\n  // 1: \"    at getCallerLocation (log.ts:X:Y)\"\n  // 2: \"    at safePipeLog (log.ts:X:Y)\"\n  // 3: \"    at log.info (log.ts:X:Y)\"  or  \"at log.error (log.ts:X:Y)\"\n  // 4: \"    at <actual caller> (file.ts:X:Y)\" <- We want this one\n\n  if (stack && stack.length > 4) {\n    const callerLine = stack[4];\n    // Extract file path and line number from the stack trace\n    // Format: \"    at FunctionName (path/to/file.ts:123:45)\"\n    const match = /\\((.+):(\\d+):\\d+\\)/.exec(callerLine) ?? /at (.+):(\\d+):\\d+/.exec(callerLine);\n\n    if (match) {\n      const [, filePath, lineNum] = match;\n      // Strip the full path to just show relative path from project root\n      const relativePath = filePath.replace(/^.*\\/cmux\\//, \"\");\n      return `${relativePath}:${lineNum}`;\n    }\n  }\n\n  return \"unknown:0\";\n}\n\n/**\n * Pipe-safe logging function with caller location prefix\n * @param level - \"info\", \"error\", or \"debug\"\n * @param args - Arguments to log\n */\nfunction safePipeLog(level: \"info\" | \"error\" | \"debug\", ...args: unknown[]): void {\n  const location = getCallerLocation();\n  const prefix = `[${location}]`;\n\n  try {\n    if (level === \"error\") {\n      console.error(prefix, ...args);\n    } else if (level === \"debug\") {\n      // Only log debug messages if CMUX_DEBUG is set\n      if (isDebugMode()) {\n        console.log(prefix, ...args);\n      }\n    } else {\n      console.log(prefix, ...args);\n    }\n  } catch (error) {\n    // Silently ignore EPIPE and other console errors\n    const errorCode =\n      error && typeof error === \"object\" && \"code\" in error ? error.code : undefined;\n    const errorMessage =\n      error && typeof error === \"object\" && \"message\" in error\n        ? String(error.message)\n        : \"Unknown error\";\n\n    if (errorCode !== \"EPIPE\") {\n      try {\n        const stream = level === \"error\" ? process.stderr : process.stdout;\n        stream.write(`${prefix} Console error: ${errorMessage}\\n`);\n      } catch {\n        // Even the fallback might fail, just ignore\n      }\n    }\n  }\n}\n\n/**\n * Dump an object to a JSON file in the debug_obj directory (only in debug mode)\n * @param filename - Name of the file (can include subdirectories like \"workspace_id/file.json\")\n * @param obj - Object to serialize and dump\n */\nfunction debugObject(filename: string, obj: unknown): void {\n  if (!isDebugMode()) {\n    return;\n  }\n\n  try {\n    // Ensure debug_obj directory exists\n    fs.mkdirSync(DEBUG_OBJ_DIR, { recursive: true });\n\n    const filePath = path.join(DEBUG_OBJ_DIR, filename);\n    const dirPath = path.dirname(filePath);\n\n    // Ensure subdirectories exist\n    fs.mkdirSync(dirPath, { recursive: true });\n\n    // Write the object as pretty-printed JSON\n    fs.writeFileSync(filePath, JSON.stringify(obj, null, 2), \"utf-8\");\n\n    // Log that we dumped the object\n    safePipeLog(\"debug\", `Dumped object to ${filePath}`);\n  } catch (error) {\n    // Don't crash if we can't write debug files\n    safePipeLog(\"error\", `Failed to dump debug object to ${filename}:`, error);\n  }\n}\n\n/**\n * Logging utilities with EPIPE protection and caller location prefixes\n */\nexport const log = {\n  /**\n   * Log an informational message to stdout\n   * Prefixes output with caller's file path and line number\n   */\n  info: (...args: unknown[]): void => {\n    safePipeLog(\"info\", ...args);\n  },\n\n  /**\n   * Log an error message to stderr\n   * Prefixes output with caller's file path and line number\n   */\n  error: (...args: unknown[]): void => {\n    safePipeLog(\"error\", ...args);\n  },\n\n  /**\n   * Log a debug message to stdout (only when CMUX_DEBUG is set)\n   * Prefixes output with caller's file path and line number\n   */\n  debug: (...args: unknown[]): void => {\n    safePipeLog(\"debug\", ...args);\n  },\n\n  /**\n   * Dump an object to a JSON file for debugging (only when CMUX_DEBUG is set)\n   * Files are written to ~/.cmux/debug_obj/\n   *\n   * @param filename - Name of the file (e.g., \"model_messages.json\" or \"workspace/data.json\")\n   * @param obj - Object to serialize and dump\n   *\n   * @example\n   * log.debug_obj(\"transformed_messages.json\", messages);\n   * log.debug_obj(`${workspaceId}/model_messages.json`, modelMessages);\n   */\n  debug_obj: debugObject,\n\n  /**\n   * Check if debug mode is enabled\n   */\n  isDebugMode,\n};\n"]}