{"version":3,"file":"aiService.js","sourceRoot":"","sources":["../../src/services/aiService.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs/promises\";\nimport * as path from \"path\";\nimport { EventEmitter } from \"events\";\nimport { convertToModelMessages, wrapLanguageModel, type LanguageModel } from \"ai\";\nimport { createAnthropic } from \"@ai-sdk/anthropic\";\nimport type { Result } from \"@/types/result\";\nimport { Ok, Err } from \"@/types/result\";\nimport type { WorkspaceMetadata } from \"@/types/workspace\";\nimport { WorkspaceMetadataSchema } from \"@/types/workspace\";\nimport type { CmuxMessage } from \"@/types/message\";\nimport { createCmuxMessage } from \"@/types/message\";\nimport type { Config } from \"@/config\";\nimport { StreamManager } from \"./streamManager\";\nimport type { SendMessageError } from \"@/types/errors\";\nimport { getToolsForModel } from \"@/utils/tools/tools\";\nimport { log } from \"./log\";\nimport {\n  transformModelMessages,\n  validateAnthropicCompliance,\n  addInterruptedSentinel,\n  filterEmptyAssistantMessages,\n  stripReasoningForOpenAI,\n} from \"@/utils/messages/modelMessageTransform\";\nimport { applyCacheControl } from \"@/utils/ai/cacheStrategy\";\nimport type { HistoryService } from \"./historyService\";\nimport type { PartialService } from \"./partialService\";\nimport { buildSystemMessage } from \"./systemMessage\";\nimport { getTokenizerForModel } from \"@/utils/tokens/tokenizer\";\nimport { buildProviderOptions } from \"@/utils/ai/providerOptions\";\nimport type { ThinkingLevel } from \"@/types/thinking\";\nimport { createOpenAI } from \"@ai-sdk/openai\";\nimport { Agent } from \"undici\";\nimport type { StreamAbortEvent } from \"@/types/stream\";\nimport { applyToolPolicy, type ToolPolicy } from \"@/utils/tools/toolPolicy\";\nimport { openaiReasoningFixMiddleware } from \"@/utils/ai/openaiReasoningMiddleware\";\n\n// Export a standalone version of getToolsForModel for use in backend\n\n// Create undici agent with unlimited timeouts for AI streaming requests.\n// Safe because users control cancellation via AbortSignal from the UI.\nconst unlimitedTimeoutAgent = new Agent({\n  bodyTimeout: 0, // No timeout - prevents BodyTimeoutError on long reasoning pauses\n  headersTimeout: 0, // No timeout for headers\n});\n\n/**\n * Default fetch function with unlimited timeouts for AI streaming.\n * Uses undici Agent to remove artificial timeout limits while still\n * respecting user cancellation via AbortSignal.\n *\n * Note: If users provide custom fetch in providers.jsonc, they are\n * responsible for configuring timeouts appropriately. Custom fetch\n * implementations using undici should set bodyTimeout: 0 and\n * headersTimeout: 0 to prevent BodyTimeoutError on long-running\n * reasoning models.\n */\nfunction defaultFetchWithUnlimitedTimeout(\n  input: string | URL | Request,\n  init?: RequestInit\n): Promise<Response> {\n  return fetch(input, { ...init, dispatcher: unlimitedTimeoutAgent } as RequestInit);\n}\n\nexport class AIService extends EventEmitter {\n  private readonly METADATA_FILE = \"metadata.json\";\n  private readonly streamManager: StreamManager;\n  private readonly historyService: HistoryService;\n  private readonly partialService: PartialService;\n  private readonly config: Config;\n\n  constructor(config: Config, historyService: HistoryService, partialService: PartialService) {\n    super();\n    this.config = config;\n    this.historyService = historyService;\n    this.partialService = partialService;\n    this.streamManager = new StreamManager(historyService, partialService);\n    void this.ensureSessionsDir();\n    this.setupStreamEventForwarding();\n  }\n\n  /**\n   * Forward all stream events from StreamManager to AIService consumers\n   */\n  private setupStreamEventForwarding(): void {\n    this.streamManager.on(\"stream-start\", (data) => this.emit(\"stream-start\", data));\n    this.streamManager.on(\"stream-delta\", (data) => this.emit(\"stream-delta\", data));\n    this.streamManager.on(\"stream-end\", (data) => this.emit(\"stream-end\", data));\n\n    // Handle stream-abort: commit partial to history before forwarding\n    this.streamManager.on(\"stream-abort\", (data: StreamAbortEvent) => {\n      void (async () => {\n        // Commit interrupted message to history with partial:true metadata\n        // This ensures /clear and /truncate can clean up interrupted messages\n        await this.partialService.commitToHistory(data.workspaceId);\n        await this.partialService.deletePartial(data.workspaceId);\n\n        // Forward abort event to consumers\n        this.emit(\"stream-abort\", data);\n      })();\n    });\n\n    this.streamManager.on(\"error\", (data) => this.emit(\"error\", data));\n    // Forward tool events\n    this.streamManager.on(\"tool-call-start\", (data) => this.emit(\"tool-call-start\", data));\n    this.streamManager.on(\"tool-call-delta\", (data) => this.emit(\"tool-call-delta\", data));\n    this.streamManager.on(\"tool-call-end\", (data) => this.emit(\"tool-call-end\", data));\n    // Forward reasoning events\n    this.streamManager.on(\"reasoning-delta\", (data) => this.emit(\"reasoning-delta\", data));\n    this.streamManager.on(\"reasoning-end\", (data) => this.emit(\"reasoning-end\", data));\n  }\n\n  private async ensureSessionsDir(): Promise<void> {\n    try {\n      await fs.mkdir(this.config.sessionsDir, { recursive: true });\n    } catch (error) {\n      log.error(\"Failed to create sessions directory:\", error);\n    }\n  }\n\n  private getMetadataPath(workspaceId: string): string {\n    return path.join(this.config.getSessionDir(workspaceId), this.METADATA_FILE);\n  }\n\n  async getWorkspaceMetadata(workspaceId: string): Promise<Result<WorkspaceMetadata>> {\n    try {\n      const metadataPath = this.getMetadataPath(workspaceId);\n      const data = await fs.readFile(metadataPath, \"utf-8\");\n\n      // Parse and validate with Zod schema (handles any type safely)\n      const validated = WorkspaceMetadataSchema.parse(JSON.parse(data));\n\n      return Ok(validated);\n    } catch (error) {\n      if (error && typeof error === \"object\" && \"code\" in error && error.code === \"ENOENT\") {\n        // If metadata doesn't exist, we cannot create valid defaults without the workspace path\n        // The workspace path must be provided when the workspace is created\n        return Err(\n          `Workspace metadata not found for ${workspaceId}. Workspace may not be properly initialized.`\n        );\n      }\n      const message = error instanceof Error ? error.message : String(error);\n      return Err(`Failed to read workspace metadata: ${message}`);\n    }\n  }\n\n  async saveWorkspaceMetadata(\n    workspaceId: string,\n    metadata: WorkspaceMetadata\n  ): Promise<Result<void>> {\n    try {\n      const workspaceDir = this.config.getSessionDir(workspaceId);\n      await fs.mkdir(workspaceDir, { recursive: true });\n      const metadataPath = this.getMetadataPath(workspaceId);\n      await fs.writeFile(metadataPath, JSON.stringify(metadata, null, 2));\n      return Ok(undefined);\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      return Err(`Failed to save workspace metadata: ${message}`);\n    }\n  }\n\n  /**\n   * Split assistant messages that have text after tool calls with results.\n\n  /**\n   * Create an AI SDK model from a model string (e.g., \"anthropic:claude-opus-4-1\")\n   *\n   * IMPORTANT: We ONLY use providers.jsonc as the single source of truth for provider configuration.\n   * We DO NOT use environment variables or default constructors that might read them.\n   * This ensures consistent, predictable configuration management.\n   *\n   * Provider configuration from providers.jsonc is passed verbatim to the provider\n   * constructor, ensuring automatic parity with Vercel AI SDK - any configuration options\n   * supported by the provider will work without modification.\n   */\n  private createModel(modelString: string): Result<LanguageModel, SendMessageError> {\n    try {\n      // Parse model string (format: \"provider:model-id\")\n      const [providerName, modelId] = modelString.split(\":\");\n\n      if (!providerName || !modelId) {\n        return Err({\n          type: \"invalid_model_string\",\n          message: `Invalid model string format: \"${modelString}\". Expected \"provider:model-id\"`,\n        });\n      }\n\n      // Load providers configuration - the ONLY source of truth\n      const providersConfig = this.config.loadProvidersConfig();\n      const providerConfig = providersConfig?.[providerName] ?? {};\n\n      // Handle Anthropic provider\n      if (providerName === \"anthropic\") {\n        // Check for API key in config\n        if (!providerConfig.apiKey) {\n          return Err({\n            type: \"api_key_not_found\",\n            provider: providerName,\n          });\n        }\n\n        // Pass configuration verbatim to the provider, ensuring parity with Vercel AI SDK\n        const provider = createAnthropic(providerConfig);\n        return Ok(provider(modelId));\n      }\n\n      // Handle OpenAI provider (using Responses API)\n      if (providerName === \"openai\") {\n        if (!providerConfig.apiKey) {\n          return Err({\n            type: \"api_key_not_found\",\n            provider: providerName,\n          });\n        }\n        // Use user's custom fetch as-is if provided (user controls timeouts),\n        // otherwise use our default fetch with unlimited timeout.\n        const fetchToUse =\n          typeof providerConfig.fetch === \"function\"\n            ? (providerConfig.fetch as typeof fetch)\n            : defaultFetchWithUnlimitedTimeout;\n\n        const provider = createOpenAI({\n          ...providerConfig,\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-explicit-any\n          fetch: fetchToUse as any,\n        });\n        // Use Responses API for persistence and built-in tools\n        const baseModel = provider.responses(modelId);\n\n        // Wrap with middleware to fix reasoning items\n        const wrappedModel = wrapLanguageModel({\n          model: baseModel,\n          middleware: openaiReasoningFixMiddleware,\n        });\n\n        return Ok(wrappedModel);\n      }\n\n      return Err({\n        type: \"provider_not_supported\",\n        provider: providerName,\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      return Err({ type: \"unknown\", raw: `Failed to create model: ${errorMessage}` });\n    }\n  }\n\n  /**\n   * Stream a message conversation to the AI model\n   * @param messages Array of conversation messages\n   * @param workspaceId Unique identifier for the workspace\n   * @param modelString Model string (e.g., \"anthropic:claude-opus-4-1\") - required from frontend\n   * @param thinkingLevel Optional thinking/reasoning level for AI models\n   * @param toolPolicy Optional policy to filter available tools\n   * @param abortSignal Optional signal to abort the stream\n   * @param additionalSystemInstructions Optional additional system instructions to append\n   * @param maxOutputTokens Optional maximum tokens for model output\n   * @returns Promise that resolves when streaming completes or fails\n   */\n  async streamMessage(\n    messages: CmuxMessage[],\n    workspaceId: string,\n    modelString: string,\n    thinkingLevel?: ThinkingLevel,\n    toolPolicy?: ToolPolicy,\n    abortSignal?: AbortSignal,\n    additionalSystemInstructions?: string,\n    maxOutputTokens?: number\n  ): Promise<Result<void, SendMessageError>> {\n    try {\n      // DEBUG: Log streamMessage call\n      const lastMessage = messages[messages.length - 1];\n      log.debug(\n        `[STREAM MESSAGE] workspaceId=${workspaceId} messageCount=${messages.length} lastRole=${lastMessage?.role}`\n      );\n\n      // Before starting a new stream, commit any existing partial to history\n      // This is idempotent - won't double-commit if already in chat.jsonl\n      await this.partialService.commitToHistory(workspaceId);\n\n      // Create model instance with early API key validation\n      const modelResult = this.createModel(modelString);\n      if (!modelResult.success) {\n        return Err(modelResult.error);\n      }\n\n      // Dump original messages for debugging\n      log.debug_obj(`${workspaceId}/1_original_messages.json`, messages);\n\n      // Extract provider name from modelString (e.g., \"anthropic:claude-opus-4-1\" -> \"anthropic\")\n      const [providerName] = modelString.split(\":\");\n\n      // Filter out assistant messages with only reasoning (no text/tools)\n      let filteredMessages = filterEmptyAssistantMessages(messages);\n      log.debug(`Filtered ${messages.length - filteredMessages.length} empty assistant messages`);\n      log.debug_obj(`${workspaceId}/1a_filtered_messages.json`, filteredMessages);\n\n      // OpenAI-specific: Strip reasoning parts from history\n      // OpenAI manages reasoning via previousResponseId; sending Anthropic-style reasoning\n      // parts creates orphaned reasoning items that cause API errors\n      if (providerName === \"openai\") {\n        filteredMessages = stripReasoningForOpenAI(filteredMessages);\n        log.debug(\"Stripped reasoning parts for OpenAI\");\n        log.debug_obj(`${workspaceId}/1b_openai_stripped.json`, filteredMessages);\n      }\n\n      // Add [INTERRUPTED] sentinel to partial messages (for model context)\n      const messagesWithSentinel = addInterruptedSentinel(filteredMessages);\n\n      // Convert CmuxMessage to ModelMessage format using Vercel AI SDK utility\n      // Type assertion needed because CmuxMessage has custom tool parts for interrupted tools\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n      const modelMessages = convertToModelMessages(messagesWithSentinel as any);\n\n      log.debug_obj(`${workspaceId}/2_model_messages.json`, modelMessages);\n\n      // Apply ModelMessage transforms based on provider requirements\n      const transformedMessages = transformModelMessages(modelMessages, providerName);\n\n      // Apply cache control for Anthropic models AFTER transformation\n      const finalMessages = applyCacheControl(transformedMessages, modelString);\n\n      log.debug_obj(`${workspaceId}/3_final_messages.json`, finalMessages);\n\n      // Validate the messages meet Anthropic requirements (Anthropic only)\n      if (providerName === \"anthropic\") {\n        const validation = validateAnthropicCompliance(finalMessages);\n        if (!validation.valid) {\n          log.error(`Anthropic compliance validation failed: ${validation.error}`);\n          // Continue anyway, as the API might be more lenient\n        }\n      }\n\n      // Get workspace metadata to retrieve workspace path\n      const metadataResult = await this.getWorkspaceMetadata(workspaceId);\n      if (!metadataResult.success) {\n        return Err({ type: \"unknown\", raw: metadataResult.error });\n      }\n\n      // Build system message from workspace metadata\n      const systemMessage = await buildSystemMessage(\n        metadataResult.data,\n        additionalSystemInstructions\n      );\n\n      // Count system message tokens for cost tracking\n      const tokenizer = getTokenizerForModel(modelString);\n      const systemMessageTokens = tokenizer.countTokens(systemMessage);\n\n      const workspacePath = metadataResult.data.workspacePath;\n\n      // Get model-specific tools with workspace path configuration\n      const allTools = getToolsForModel(modelString, { cwd: workspacePath });\n\n      // Apply tool policy to filter tools (if policy provided)\n      const tools = applyToolPolicy(allTools, toolPolicy);\n\n      // Create assistant message placeholder with historySequence from backend\n      const assistantMessageId = `assistant-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`;\n      const assistantMessage = createCmuxMessage(assistantMessageId, \"assistant\", \"\", {\n        timestamp: Date.now(),\n        model: modelString,\n        systemMessageTokens,\n      });\n\n      // Append to history to get historySequence assigned\n      const appendResult = await this.historyService.appendToHistory(workspaceId, assistantMessage);\n      if (!appendResult.success) {\n        return Err({ type: \"unknown\", raw: appendResult.error });\n      }\n\n      // Get the assigned historySequence\n      const historySequence = assistantMessage.metadata?.historySequence ?? 0;\n\n      // Build provider options based on thinking level and message history\n      // Pass filtered messages so OpenAI can extract previousResponseId for persistence\n      const providerOptions = buildProviderOptions(\n        modelString,\n        thinkingLevel ?? \"off\",\n        filteredMessages\n      );\n\n      // Delegate to StreamManager with model instance, system message, tools, historySequence, and initial metadata\n      const streamResult = await this.streamManager.startStream(\n        workspaceId,\n        finalMessages,\n        modelResult.data,\n        modelString,\n        historySequence,\n        systemMessage,\n        abortSignal,\n        tools,\n        {\n          systemMessageTokens,\n          timestamp: Date.now(),\n        },\n        providerOptions,\n        maxOutputTokens,\n        toolPolicy\n      );\n\n      if (!streamResult.success) {\n        // StreamManager already returns SendMessageError\n        return Err(streamResult.error);\n      }\n\n      // StreamManager now handles history updates directly on stream-end\n      // No need for event listener here\n      return Ok(undefined);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      log.error(\"Stream message error:\", error);\n      // Return as unknown error type\n      return Err({ type: \"unknown\", raw: `Failed to stream message: ${errorMessage}` });\n    }\n  }\n\n  async stopStream(workspaceId: string): Promise<Result<void>> {\n    return this.streamManager.stopStream(workspaceId);\n  }\n\n  /**\n   * Check if a workspace is currently streaming\n   */\n  isStreaming(workspaceId: string): boolean {\n    return this.streamManager.isStreaming(workspaceId);\n  }\n\n  /**\n   * Get the current stream state for a workspace\n   */\n  getStreamState(workspaceId: string): string {\n    return this.streamManager.getStreamState(workspaceId);\n  }\n\n  /**\n   * Get the current stream info for a workspace if actively streaming\n   * Used to re-establish streaming context on frontend reconnection\n   */\n  getStreamInfo(workspaceId: string): ReturnType<typeof this.streamManager.getStreamInfo> {\n    return this.streamManager.getStreamInfo(workspaceId);\n  }\n\n  /**\n   * Replay stream events\n   * Emits the same events that would be emitted during live streaming\n   */\n  replayStream(workspaceId: string): void {\n    this.streamManager.replayStream(workspaceId);\n  }\n\n  async deleteWorkspace(workspaceId: string): Promise<Result<void>> {\n    try {\n      const workspaceDir = this.config.getSessionDir(workspaceId);\n      await fs.rm(workspaceDir, { recursive: true, force: true });\n      return Ok(undefined);\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      return Err(`Failed to delete workspace: ${message}`);\n    }\n  }\n}\n"]}