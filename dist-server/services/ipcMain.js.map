{"version":3,"file":"ipcMain.js","sourceRoot":"","sources":["../../src/services/ipcMain.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,iDAAsC;AACtC,2CAA6B;AAC7B,wDAA0C;AAE1C,+BAAqF;AACrF,oDAAiD;AACjD,8DAA2D;AAC3D,8DAA2D;AAC3D,6CAAsE;AACtE,wCAAqC;AAUrC,6DAAyE;AAGzE,2CAAyC;AACzC,gFAA+E;AAC/E,gDAAuD;AAEvD,uDAAqF;AAErF,MAAM,6BAA6B,GAAG,CAAC,GAAW,EAAoB,EAAE,CAAC,CAAC;IACxE,IAAI,EAAE,SAAS;IACf,GAAG;CACJ,CAAC,CAAC;AAEH;;;;;;;;;;;;GAYG;AACH,MAAa,OAAO;IACD,MAAM,CAAS;IACf,cAAc,CAAiB;IAC/B,cAAc,CAAiB;IAC/B,SAAS,CAAY;IAC9B,UAAU,GAAyB,IAAI,CAAC;IAEhD,YAAY,MAAc;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,IAAI,+BAAc,CAAC,MAAM,CAAC,CAAC;QACjD,IAAI,CAAC,cAAc,GAAG,IAAI,+BAAc,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACtE,IAAI,CAAC,SAAS,GAAG,IAAI,qBAAS,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACnF,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,OAAwB,EAAE,UAAyB;QAC1D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;QACvC,IAAI,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC;QAC3C,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAEO,sBAAsB,CAAC,OAAwB;QACrD,OAAO,CAAC,MAAM,CAAC,4BAAY,CAAC,WAAW,EAAE,GAAG,EAAE;YAC5C,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC;YACzD,OAAO;gBACL,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;aACxD,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,MAAM,CACZ,4BAAY,CAAC,WAAW,EACxB,CAAC,MAAM,EAAE,UAAwD,EAAE,EAAE;YACnE,MAAM,cAAc,GAAG;gBACrB,QAAQ,EAAE,IAAI,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC;aACvC,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;YACvC,OAAO,IAAI,CAAC;QACd,CAAC,CACF,CAAC;IACJ,CAAC;IAEO,sBAAsB,CAAC,OAAwB;QACrD,OAAO,CAAC,MAAM,CAAC,4BAAY,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;YACxD,IAAI,CAAC,IAAI,CAAC,UAAU;gBAAE,OAAO,IAAI,CAAC;YAElC,8DAA8D;YAC9D,gDAAgD;YAChD,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC;YAE5C,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE;gBAC1D,UAAU,EAAE,CAAC,eAAe,CAAC;aAC9B,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;gBACpB,OAAO,IAAI,CAAC;YACd,CAAC;YAED,OAAO,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,yBAAyB,CAAC,OAAwB;QACxD,OAAO,CAAC,MAAM,CACZ,4BAAY,CAAC,gBAAgB,EAC7B,KAAK,EAAE,MAAM,EAAE,WAAmB,EAAE,UAAkB,EAAE,EAAE;YACxD,0BAA0B;YAC1B,MAAM,UAAU,GAAG,IAAA,2CAAqB,EAAC,UAAU,CAAC,CAAC;YACrD,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;gBACtB,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,EAAE,CAAC;YACrD,CAAC;YAED,gCAAgC;YAChC,MAAM,MAAM,GAAG,MAAM,IAAA,oBAAc,EAAC,IAAI,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;YAE1E,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;gBAClC,MAAM,WAAW,GACf,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,IAAI,SAAS,CAAC;gBAE7E,6CAA6C;gBAC7C,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;gBAE9E,gCAAgC;gBAChC,MAAM,QAAQ,GAAG;oBACf,EAAE,EAAE,WAAW;oBACf,WAAW;oBACX,aAAa,EAAE,MAAM,CAAC,IAAI;iBAC3B,CAAC;gBACF,MAAM,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;gBAElE,wCAAwC;gBACxC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,IAAI,CAAC,4BAAY,CAAC,kBAAkB,EAAE;oBACjE,WAAW;oBACX,QAAQ;iBACT,CAAC,CAAC;gBAEH,OAAO;oBACL,OAAO,EAAE,IAAI;oBACb,QAAQ;iBACT,CAAC;YACJ,CAAC;YAED,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,IAAI,4BAA4B,EAAE,CAAC;QACjF,CAAC,CACF,CAAC;QAEF,OAAO,CAAC,MAAM,CAAC,4BAAY,CAAC,gBAAgB,EAAE,KAAK,EAAE,MAAM,EAAE,WAAmB,EAAE,EAAE;YAClF,IAAI,CAAC;gBACH,sBAAsB;gBACtB,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC;gBAEzD,oDAAoD;gBACpD,IAAI,aAAa,GAAkB,IAAI,CAAC;gBACxC,IAAI,gBAAgB,GAAkB,IAAI,CAAC;gBAE3C,KAAK,MAAM,CAAC,WAAW,EAAE,aAAa,CAAC,IAAI,cAAc,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC;oBAC7E,KAAK,MAAM,SAAS,IAAI,aAAa,CAAC,UAAU,EAAE,CAAC;wBACjD,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,WAAW,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;wBACjF,IAAI,WAAW,KAAK,WAAW,EAAE,CAAC;4BAChC,aAAa,GAAG,SAAS,CAAC,IAAI,CAAC;4BAC/B,gBAAgB,GAAG,WAAW,CAAC;4BAC/B,MAAM;wBACR,CAAC;oBACH,CAAC;oBACD,IAAI,aAAa;wBAAE,MAAM;gBAC3B,CAAC;gBAED,2CAA2C;gBAC3C,IAAI,aAAa,EAAE,CAAC;oBAClB,MAAM,cAAc,GAAG,MAAM,UAAU;yBACpC,MAAM,CAAC,aAAa,CAAC;yBACrB,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC;yBAChB,KAAK,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;oBAEtB,IAAI,cAAc,EAAE,CAAC;wBACnB,MAAM,SAAS,GAAG,MAAM,IAAA,oBAAc,EAAC,aAAa,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;wBACxE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;4BACvB,MAAM,YAAY,GAAG,SAAS,CAAC,KAAK,IAAI,eAAe,CAAC;4BACxD,MAAM,eAAe,GAAG,YAAY,CAAC,WAAW,EAAE,CAAC;4BACnD,MAAM,wBAAwB,GAC5B,eAAe,CAAC,QAAQ,CAAC,oBAAoB,CAAC;gCAC9C,eAAe,CAAC,QAAQ,CAAC,gBAAgB,CAAC;gCAC1C,eAAe,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;4BAE3C,IAAI,wBAAwB,EAAE,CAAC;gCAC7B,IAAI,gBAAgB,EAAE,CAAC;oCACrB,MAAM,WAAW,GAAG,MAAM,IAAA,oBAAc,EAAC,gBAAgB,CAAC,CAAC;oCAC3D,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;wCACzB,SAAG,CAAC,IAAI,CACN,uCAAuC,gBAAgB,gCACrD,WAAW,CAAC,KAAK,IAAI,eACvB,EAAE,CACH,CAAC;oCACJ,CAAC;gCACH,CAAC;4BACH,CAAC;iCAAM,CAAC;gCACN,OAAO,SAAS,CAAC;4BACnB,CAAC;wBACH,CAAC;oBACH,CAAC;yBAAM,IAAI,gBAAgB,EAAE,CAAC;wBAC5B,MAAM,WAAW,GAAG,MAAM,IAAA,oBAAc,EAAC,gBAAgB,CAAC,CAAC;wBAC3D,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;4BACzB,SAAG,CAAC,IAAI,CACN,uCAAuC,gBAAgB,yCAAyC,aAAa,KAC3G,WAAW,CAAC,KAAK,IAAI,eACvB,EAAE,CACH,CAAC;wBACJ,CAAC;oBACH,CAAC;gBACH,CAAC;gBAED,uCAAuC;gBACvC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;gBACnE,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;oBACtB,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACnD,CAAC;gBAED,wCAAwC;gBACxC,IAAI,gBAAgB,IAAI,aAAa,EAAE,CAAC;oBACtC,MAAM,aAAa,GAAG,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;oBACpE,IAAI,aAAa,EAAE,CAAC;wBAClB,aAAa,CAAC,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC,MAAM,CACxD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,aAAa,CAChC,CAAC;wBACF,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;oBACzC,CAAC;gBACH,CAAC;gBAED,sFAAsF;gBACtF,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,IAAI,CAAC,4BAAY,CAAC,kBAAkB,EAAE;oBACjE,WAAW;oBACX,QAAQ,EAAE,IAAI,EAAE,uCAAuC;iBACxD,CAAC,CAAC;gBAEH,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YAC3B,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,OAAO,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,+BAA+B,OAAO,EAAE,EAAE,CAAC;YAC7E,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,MAAM,CACZ,4BAAY,CAAC,gBAAgB,EAC7B,KAAK,EAAE,MAAM,EAAE,WAAmB,EAAE,OAAe,EAAE,EAAE;YACrD,IAAI,CAAC;gBACH,0BAA0B;gBAC1B,MAAM,UAAU,GAAG,IAAA,2CAAqB,EAAC,OAAO,CAAC,CAAC;gBAClD,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;oBACtB,OAAO,IAAA,YAAG,EAAC,UAAU,CAAC,KAAK,IAAI,wBAAwB,CAAC,CAAC;gBAC3D,CAAC;gBAED,2CAA2C;gBAC3C,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE,CAAC;oBAC5C,OAAO,IAAA,YAAG,EACR,qFAAqF,CACtF,CAAC;gBACJ,CAAC;gBAED,uBAAuB;gBACvB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;gBAC9E,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;oBAC5B,OAAO,IAAA,YAAG,EAAC,qCAAqC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC1E,CAAC;gBACD,MAAM,WAAW,GAAG,cAAc,CAAC,IAAI,CAAC;gBAExC,6BAA6B;gBAC7B,MAAM,cAAc,GAAG,GAAG,WAAW,CAAC,WAAW,IAAI,OAAO,EAAE,CAAC;gBAE/D,qDAAqD;gBACrD,IAAI,cAAc,KAAK,WAAW,EAAE,CAAC;oBACnC,OAAO,IAAA,WAAE,EAAC,EAAE,cAAc,EAAE,CAAC,CAAC;gBAChC,CAAC;gBAED,2CAA2C;gBAC3C,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAC;gBACnF,IAAI,gBAAgB,CAAC,OAAO,EAAE,CAAC;oBAC7B,OAAO,IAAA,YAAG,EAAC,wBAAwB,OAAO,kBAAkB,CAAC,CAAC;gBAChE,CAAC;gBAED,0CAA0C;gBAC1C,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;gBAC7D,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;gBAEhE,4DAA4D;gBAC5D,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC;gBACzD,IAAI,gBAAgB,GAAkB,IAAI,CAAC;gBAC3C,IAAI,cAAc,GAAG,CAAC,CAAC,CAAC;gBAExB,KAAK,MAAM,CAAC,WAAW,EAAE,aAAa,CAAC,IAAI,cAAc,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC;oBAC7E,MAAM,GAAG,GAAG,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE;wBACnD,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;wBACzE,OAAO,WAAW,KAAK,WAAW,CAAC;oBACrC,CAAC,CAAC,CAAC;oBAEH,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC;wBACf,gBAAgB,GAAG,WAAW,CAAC;wBAC/B,cAAc,GAAG,GAAG,CAAC;wBACrB,MAAM;oBACR,CAAC;gBACH,CAAC;gBAED,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBACtB,OAAO,IAAA,YAAG,EAAC,2CAA2C,CAAC,CAAC;gBAC1D,CAAC;gBAED,2BAA2B;gBAC3B,MAAM,UAAU,CAAC,MAAM,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;gBAEtD,4CAA4C;gBAC5C,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAChE,WAAW,EACX,cAAc,CACf,CAAC;gBACF,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;oBAC3B,oCAAoC;oBACpC,MAAM,UAAU,CAAC,MAAM,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;oBACtD,OAAO,IAAA,YAAG,EAAC,4CAA4C,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC;gBAChF,CAAC;gBAED,8BAA8B;gBAC9B,MAAM,eAAe,GAAG,WAAW,CAAC,aAAa,CAAC;gBAClD,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAC/B,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,EAC7B,OAAO,CAAC,oCAAoC;iBAC7C,CAAC;gBAEF,0BAA0B;gBAC1B,MAAM,UAAU,GAAG,MAAM,IAAA,kBAAY,EAAC,gBAAgB,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC;gBAC1F,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;oBACxB,oCAAoC;oBACpC,MAAM,UAAU,CAAC,MAAM,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;oBACtD,OAAO,IAAA,YAAG,EAAC,4BAA4B,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC7D,CAAC;gBAED,uCAAuC;gBACvC,MAAM,WAAW,GAAG;oBAClB,EAAE,EAAE,cAAc;oBAClB,WAAW,EAAE,WAAW,CAAC,WAAW;oBACpC,aAAa,EAAE,eAAe;iBAC/B,CAAC;gBAEF,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAC3D,cAAc,EACd,WAAW,CACZ,CAAC;gBACF,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;oBACxB,0CAA0C;oBAC1C,MAAM,IAAA,kBAAY,EAAC,gBAAgB,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC;oBACvE,MAAM,UAAU,CAAC,MAAM,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;oBACtD,OAAO,IAAA,YAAG,EAAC,gCAAgC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC;gBACjE,CAAC;gBAED,0DAA0D;gBAC1D,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,EAAE;oBAChC,MAAM,aAAa,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;oBAC5D,IAAI,aAAa,IAAI,cAAc,KAAK,CAAC,CAAC,EAAE,CAAC;wBAC3C,aAAa,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG;4BACzC,IAAI,EAAE,eAAe;yBACtB,CAAC;oBACJ,CAAC;oBACD,OAAO,MAAM,CAAC;gBAChB,CAAC,CAAC,CAAC;gBAEH,iDAAiD;gBACjD,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,IAAI,CAAC,4BAAY,CAAC,kBAAkB,EAAE;oBACjE,WAAW;oBACX,QAAQ,EAAE,IAAI;iBACf,CAAC,CAAC;gBAEH,wCAAwC;gBACxC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,IAAI,CAAC,4BAAY,CAAC,kBAAkB,EAAE;oBACjE,WAAW,EAAE,cAAc;oBAC3B,QAAQ,EAAE,WAAW;iBACtB,CAAC,CAAC;gBAEH,OAAO,IAAA,WAAE,EAAC,EAAE,cAAc,EAAE,CAAC,CAAC;YAChC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,OAAO,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvE,OAAO,IAAA,YAAG,EAAC,+BAA+B,OAAO,EAAE,CAAC,CAAC;YACvD,CAAC;QACH,CAAC,CACF,CAAC;QAEF,OAAO,CAAC,MAAM,CAAC,4BAAY,CAAC,cAAc,EAAE,GAAG,EAAE;YAC/C,IAAI,CAAC;gBACH,OAAO,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,CAAC;YAC/C,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;gBACnD,OAAO,EAAE,CAAC;YACZ,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,MAAM,CAAC,4BAAY,CAAC,kBAAkB,EAAE,KAAK,EAAE,MAAM,EAAE,WAAmB,EAAE,EAAE;YACpF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YACtE,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,MAAM,CACZ,4BAAY,CAAC,sBAAsB,EACnC,KAAK,EAAE,MAAM,EAAE,WAAmB,EAAE,OAAe,EAAE,OAA4B,EAAE,EAAE;YACnF,MAAM,EACJ,aAAa,EACb,aAAa,EACb,KAAK,EACL,UAAU,EACV,4BAA4B,EAC5B,eAAe,GAChB,GAAG,OAAO,IAAI,EAAE,CAAC;YAClB,SAAG,CAAC,KAAK,CAAC,+BAA+B,EAAE;gBACzC,WAAW;gBACX,cAAc,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;gBACxC,aAAa;gBACb,aAAa;gBACb,KAAK;gBACL,UAAU;gBACV,4BAA4B;gBAC5B,eAAe;aAChB,CAAC,CAAC;YACH,IAAI,CAAC;gBACH,+EAA+E;gBAC/E,kFAAkF;gBAClF,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;oBACpB,4DAA4D;oBAC5D,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE,CAAC;wBAC5C,SAAG,CAAC,KAAK,CAAC,mEAAmE,CAAC,CAAC;wBAC/E,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;wBAChE,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;4BACxB,SAAG,CAAC,KAAK,CAAC,wBAAwB,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;4BACtD,OAAO;gCACL,OAAO,EAAE,KAAK;gCACd,KAAK,EAAE,6BAA6B,CAAC,UAAU,CAAC,KAAK,CAAC;6BACvD,CAAC;wBACJ,CAAC;wBACD,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;oBAC3B,CAAC;oBAED,iFAAiF;oBACjF,SAAG,CAAC,KAAK,CAAC,6DAA6D,CAAC,CAAC;oBACzE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,mDAAmD;gBAC/E,CAAC;gBAED,8DAA8D;gBAC9D,IAAI,aAAa,EAAE,CAAC;oBAClB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,oBAAoB,CACnE,WAAW,EACX,aAAa,CACd,CAAC;oBACF,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;wBAC5B,SAAG,CAAC,KAAK,CAAC,sCAAsC,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC;wBACxE,OAAO;4BACL,OAAO,EAAE,KAAK;4BACd,KAAK,EAAE,6BAA6B,CAAC,cAAc,CAAC,KAAK,CAAC;yBAC3D,CAAC;oBACJ,CAAC;oBACD,qEAAqE;oBACrE,uFAAuF;gBACzF,CAAC;gBAED,sBAAsB;gBACtB,MAAM,SAAS,GAAG,QAAQ,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;gBACtF,MAAM,WAAW,GAAG,IAAA,2BAAiB,EAAC,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE;oBAChE,uEAAuE;oBACvE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;oBACrB,UAAU,EAAE,uDAAuD;iBACpE,CAAC,CAAC;gBAEH,iCAAiC;gBACjC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;gBACzF,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;oBAC1B,SAAG,CAAC,KAAK,CAAC,sCAAsC,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;oBACtE,OAAO;wBACL,OAAO,EAAE,KAAK;wBACd,KAAK,EAAE,6BAA6B,CAAC,YAAY,CAAC,KAAK,CAAC;qBACzD,CAAC;gBACJ,CAAC;gBAED,yDAAyD;gBACzD,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;oBACpB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,WAAW,CAAC,EAAE,WAAW,CAAC,CAAC;gBAC7E,CAAC;gBAED,wDAAwD;gBACxD,qEAAqE;gBACrE,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;gBAEvD,gCAAgC;gBAChC,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;gBACxE,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;oBAC3B,SAAG,CAAC,KAAK,CAAC,qCAAqC,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;oBACtE,OAAO;wBACL,OAAO,EAAE,KAAK;wBACd,KAAK,EAAE,6BAA6B,CAAC,aAAa,CAAC,KAAK,CAAC;qBAC1D,CAAC;gBACJ,CAAC;gBAED,yBAAyB;gBACzB,IAAI,CAAC,KAAK,EAAE,CAAC;oBACX,SAAG,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;oBAC3C,OAAO;wBACL,OAAO,EAAE,KAAK;wBACd,KAAK,EAAE,6BAA6B,CAClC,iEAAiE,CAClE;qBACF,CAAC;gBACJ,CAAC;gBACD,SAAG,CAAC,KAAK,CAAC,yEAAyE,EAAE;oBACnF,aAAa;oBACb,KAAK;oBACL,UAAU;oBACV,4BAA4B;oBAC5B,eAAe;iBAChB,CAAC,CAAC;gBACH,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,aAAa,CACrD,aAAa,CAAC,IAAI,EAClB,WAAW,EACX,KAAK,EACL,aAAa,EACb,UAAU,EACV,SAAS,EACT,4BAA4B,EAC5B,eAAe,CAChB,CAAC;gBACF,SAAG,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;gBACnD,OAAO,YAAY,CAAC;YACtB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,uDAAuD;gBACvD,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC5E,SAAG,CAAC,KAAK,CAAC,0CAA0C,EAAE,KAAK,CAAC,CAAC;gBAC7D,MAAM,SAAS,GAAqB;oBAClC,IAAI,EAAE,SAAS;oBACf,GAAG,EAAE,2BAA2B,YAAY,EAAE;iBAC/C,CAAC;gBACF,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;YAC9C,CAAC;QACH,CAAC,CACF,CAAC;QAEF,OAAO,CAAC,MAAM,CACZ,4BAAY,CAAC,0BAA0B,EACvC,KAAK,EAAE,MAAM,EAAE,WAAmB,EAAE,UAAmB,EAAE,EAAE;YACzD,6CAA6C;YAC7C,yEAAyE;YACzE,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE,CAAC;gBAC5C,OAAO;oBACL,OAAO,EAAE,KAAK;oBACd,KAAK,EACH,qFAAqF;iBACxF,CAAC;YACJ,CAAC;YAED,2DAA2D;YAC3D,oEAAoE;YACpE,wEAAwE;YACxE,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAC9D,WAAW,EACX,UAAU,IAAI,GAAG,CAClB,CAAC;YACF,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;gBAC5B,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,cAAc,CAAC,KAAK,EAAE,CAAC;YACzD,CAAC;YAED,4EAA4E;YAC5E,MAAM,gBAAgB,GAAG,cAAc,CAAC,IAAI,CAAC;YAC7C,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACnD,MAAM,aAAa,GAAkB;oBACnC,IAAI,EAAE,QAAQ;oBACd,gBAAgB,EAAE,gBAAgB;iBACnC,CAAC;gBACF,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,WAAW,CAAC,EAAE,aAAa,CAAC,CAAC;YAC/E,CAAC;YAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;QAC5C,CAAC,CACF,CAAC;QAEF,OAAO,CAAC,MAAM,CACZ,4BAAY,CAAC,yBAAyB,EACtC,KAAK,EAAE,MAAM,EAAE,WAAmB,EAAE,cAA2B,EAAE,EAAE;YACjE,gFAAgF;YAChF,4EAA4E;YAC5E,MAAM,YAAY,GAAG,cAAc,CAAC,QAAQ,EAAE,SAAS,KAAK,IAAI,CAAC;YACjE,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE,CAAC;gBAC7D,OAAO,IAAA,YAAG,EACR,oFAAoF,CACrF,CAAC;YACJ,CAAC;YAED,IAAI,CAAC;gBACH,qEAAqE;gBACrE,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;gBACxE,MAAM,gBAAgB,GAAG,aAAa,CAAC,OAAO;oBAC5C,CAAC,CAAC,aAAa,CAAC,IAAI;yBACf,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,eAAe,IAAI,CAAC,CAAC,CAAC;yBACjD,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;oBAC1B,CAAC,CAAC,EAAE,CAAC;gBAEP,uBAAuB;gBACvB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;gBACxE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;oBACzB,OAAO,IAAA,YAAG,EAAC,4BAA4B,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC9D,CAAC;gBAED,mFAAmF;gBACnF,+EAA+E;gBAC/E,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAC5D,WAAW,EACX,cAAc,CACf,CAAC;gBACF,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;oBAC1B,OAAO,IAAA,YAAG,EAAC,6BAA6B,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC;gBAChE,CAAC;gBAED,qDAAqD;gBACrD,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;oBACnD,MAAM,aAAa,GAAkB;wBACnC,IAAI,EAAE,QAAQ;wBACd,gBAAgB,EAAE,gBAAgB;qBACnC,CAAC;oBACF,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,WAAW,CAAC,EAAE,aAAa,CAAC,CAAC;gBAC/E,CAAC;gBAED,2CAA2C;gBAC3C,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;oBACpB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,WAAW,CAAC,EAAE,cAAc,CAAC,CAAC;gBAChF,CAAC;gBAED,OAAO,IAAA,WAAE,EAAC,SAAS,CAAC,CAAC;YACvB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,OAAO,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvE,OAAO,IAAA,YAAG,EAAC,8BAA8B,OAAO,EAAE,CAAC,CAAC;YACtD,CAAC;QACH,CAAC,CACF,CAAC;QAEF,OAAO,CAAC,MAAM,CACZ,4BAAY,CAAC,sBAAsB,EACnC,KAAK,EACH,MAAM,EACN,WAAmB,EACnB,MAAc,EACd,OAAuE,EACvE,EAAE;YACF,IAAI,CAAC;gBACH,+CAA+C;gBAC/C,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;gBAC9E,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;oBAC5B,OAAO,IAAA,YAAG,EAAC,qCAAqC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC1E,CAAC;gBAED,MAAM,aAAa,GAAG,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC;gBAExD,wCAAwC;gBACxC,MAAM,QAAQ,GAAG,IAAA,qBAAc,EAAC,EAAE,GAAG,EAAE,aAAa,EAAE,CAAC,CAAC;gBAExD,2CAA2C;gBAC3C,MAAM,iBAAiB,GAAG,OAAO,EAAE,SAAS,IAAI,mCAAsB,CAAC;gBACvE,MAAM,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBACtE,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,kBAAkB,EAAE,gCAAmB,CAAC,CAAC;gBAE1E,MAAM,MAAM,GAAG,CAAC,MAAM,QAAQ,CAAC,OAAQ,CACrC;oBACE,MAAM;oBACN,YAAY,EAAE,OAAO,EAAE,YAAY,IAAI,GAAG;oBAC1C,SAAS,EAAE,eAAe;oBAC1B,KAAK,EAAE,OAAO,EAAE,KAAK;iBACtB,EACD;oBACE,UAAU,EAAE,QAAQ,IAAI,CAAC,GAAG,EAAE,EAAE;oBAChC,QAAQ,EAAE,EAAE;iBACb,CACF,CAAmB,CAAC;gBAErB,OAAO,IAAA,WAAE,EAAC,MAAM,CAAC,CAAC;YACpB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,OAAO,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvE,OAAO,IAAA,YAAG,EAAC,mCAAmC,OAAO,EAAE,CAAC,CAAC;YAC3D,CAAC;QACH,CAAC,CACF,CAAC;QAEF,OAAO,CAAC,MAAM,CAAC,4BAAY,CAAC,uBAAuB,EAAE,CAAC,MAAM,EAAE,aAAqB,EAAE,EAAE;YACrF,IAAI,CAAC;gBACH,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE,CAAC;oBAClC,sDAAsD;oBACtD,IAAI,CAAC;wBACH,IAAA,qBAAK,EAAC,MAAM,EAAE,CAAC,IAAI,EAAE,SAAS,EAAE,aAAa,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;oBACtE,CAAC;oBAAC,MAAM,CAAC;wBACP,IAAA,qBAAK,EAAC,MAAM,EAAE,CAAC,IAAI,EAAE,UAAU,EAAE,aAAa,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;oBACvE,CAAC;gBACH,CAAC;qBAAM,IAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,EAAE,CAAC;oBACxC,UAAU;oBACV,IAAA,qBAAK,EAAC,KAAK,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,CAAC,EAAE;wBACpE,QAAQ,EAAE,IAAI;wBACd,KAAK,EAAE,IAAI;qBACZ,CAAC,CAAC;gBACL,CAAC;qBAAM,CAAC;oBACN,qDAAqD;oBACrD,IAAI,CAAC;wBACH,IAAA,qBAAK,EAAC,qBAAqB,EAAE,EAAE,EAAE;4BAC/B,GAAG,EAAE,aAAa;4BAClB,QAAQ,EAAE,IAAI;yBACf,CAAC,CAAC;oBACL,CAAC;oBAAC,MAAM,CAAC;wBACP,IAAA,qBAAK,EAAC,OAAO,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,aAAa,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;oBAC7D,CAAC;gBACH,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,OAAO,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvE,SAAG,CAAC,KAAK,CAAC,4BAA4B,OAAO,EAAE,CAAC,CAAC;YACnD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,wBAAwB,CAAC,OAAwB;QACvD,OAAO,CAAC,MAAM,CACZ,4BAAY,CAAC,oBAAoB,EACjC,CAAC,MAAM,EAAE,QAAgB,EAAE,OAAiB,EAAE,KAAa,EAAE,EAAE;YAC7D,IAAI,CAAC;gBACH,gDAAgD;gBAChD,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,IAAI,EAAE,CAAC;gBAEhE,yBAAyB;gBACzB,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE,CAAC;oBAC/B,eAAe,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;gBACjC,CAAC;gBAED,4BAA4B;gBAC5B,IAAI,OAAO,GAAG,eAAe,CAAC,QAAQ,CAA4B,CAAC;gBACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;oBAC5C,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;oBACvB,IAAI,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC,IAAI,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC;wBACnF,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;oBACpB,CAAC;oBACD,OAAO,GAAG,OAAO,CAAC,GAAG,CAA4B,CAAC;gBACpD,CAAC;gBAED,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACvB,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;gBAC/C,CAAC;gBAED,sBAAsB;gBACtB,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;gBAEjD,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;YAC5C,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,OAAO,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,kCAAkC,OAAO,EAAE,EAAE,CAAC;YAChF,CAAC;QACH,CAAC,CACF,CAAC;QAEF,OAAO,CAAC,MAAM,CAAC,4BAAY,CAAC,cAAc,EAAE,GAAG,EAAE;YAC/C,IAAI,CAAC;gBACH,2DAA2D;gBAC3D,qDAAqD;gBACrD,OAAO,CAAC,WAAW,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAC3C,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,SAAG,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;gBAC9C,OAAO,EAAE,CAAC;YACZ,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,4BAA4B,CAAC,OAAwB;QAC3D,8CAA8C;QAC9C,OAAO,CAAC,EAAE,CAAC,0BAA0B,EAAE,CAAC,MAAM,EAAE,WAAmB,EAAE,EAAE;YACrE,KAAK,CAAC,KAAK,IAAI,EAAE;gBACf,MAAM,WAAW,GAAG,IAAA,8BAAc,EAAC,WAAW,CAAC,CAAC;gBAEhD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;gBAClE,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;oBACpB,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;wBAC/B,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;oBACtD,CAAC;oBAED,yDAAyD;oBACzD,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;oBAC7D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;oBAEnE,IAAI,UAAU,EAAE,CAAC;wBACf,+EAA+E;wBAC/E,8DAA8D;wBAC9D,6EAA6E;wBAC7E,mEAAmE;wBACnE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;oBAC3C,CAAC;yBAAM,IAAI,OAAO,EAAE,CAAC;wBACnB,uFAAuF;wBACvF,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;oBAC1D,CAAC;gBACH,CAAC;gBAED,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;YACxE,CAAC,CAAC,EAAE,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,0CAA0C;QAC1C,OAAO,CAAC,EAAE,CAAC,4BAAY,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACzD,IAAI,CAAC;gBACH,MAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,CAAC;gBAEhE,2CAA2C;gBAC3C,KAAK,MAAM,QAAQ,IAAI,iBAAiB,EAAE,CAAC;oBACzC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,IAAI,CAAC,4BAAY,CAAC,kBAAkB,EAAE;wBACjE,WAAW,EAAE,QAAQ,CAAC,EAAE;wBACxB,QAAQ;qBACT,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;YAC3D,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,oBAAoB;QAC1B,wCAAwC;QACxC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,IAAsB,EAAE,EAAE;YAC3D,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpB,qCAAqC;gBACrC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,IAAsB,EAAE,EAAE;YAC3D,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpB,kDAAkD;gBAClD,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,IAAoB,EAAE,EAAE;YACvD,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpB,4DAA4D;gBAC5D,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,kCAAkC;QAClC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC,IAAwB,EAAE,EAAE;YAChE,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC,IAAwB,EAAE,EAAE;YAChE,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,IAAsB,EAAE,EAAE;YAC5D,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,uCAAuC;QACvC,IAAI,CAAC,SAAS,CAAC,EAAE,CACf,iBAAiB,EACjB,CAAC,IAA6E,EAAE,EAAE;YAChF,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,SAAS,CAAC,EAAE,CACf,eAAe,EACf,CAAC,IAA8D,EAAE,EAAE;YACjE,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAgB,EAAE,EAAE;YAC9C,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpB,yCAAyC;gBACzC,MAAM,YAAY,GAAuB;oBACvC,IAAI,EAAE,cAAc;oBACpB,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,SAAS,EAAE,IAAI,CAAC,SAAS,IAAI,SAAS;iBACvC,CAAC;gBACF,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,WAAW,CAAC,EAAE,YAAY,CAAC,CAAC;YACnF,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,6BAA6B;QAC7B,IAAI,CAAC,SAAS,CAAC,EAAE,CACf,cAAc,EACd,CAAC,IAA+D,EAAE,EAAE;YAClE,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpB,0CAA0C;gBAC1C,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAA,8BAAc,EAAC,IAAI,CAAC,WAAW,CAAC,EAAE;oBACjE,IAAI,EAAE,cAAc;oBACpB,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,SAAS,EAAE,IAAI,CAAC,SAAS;iBAC1B,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CACF,CAAC;IACJ,CAAC;CACF;AAr2BD,0BAq2BC","sourcesContent":["import type { BrowserWindow, IpcMain as ElectronIpcMain } from \"electron\";\nimport { spawn } from \"child_process\";\nimport * as path from \"path\";\nimport * as fsPromises from \"fs/promises\";\nimport type { Config, ProjectConfig } from \"@/config\";\nimport { createWorktree, removeWorktree, moveWorktree, pruneWorktrees } from \"@/git\";\nimport { AIService } from \"@/services/aiService\";\nimport { HistoryService } from \"@/services/historyService\";\nimport { PartialService } from \"@/services/partialService\";\nimport { createCmuxMessage, type CmuxMessage } from \"@/types/message\";\nimport { log } from \"@/services/log\";\nimport type {\n  StreamStartEvent,\n  StreamDeltaEvent,\n  StreamEndEvent,\n  ToolCallStartEvent,\n  ToolCallDeltaEvent,\n  ToolCallEndEvent,\n  ErrorEvent,\n} from \"@/types/stream\";\nimport { IPC_CHANNELS, getChatChannel } from \"@/constants/ipc-constants\";\nimport type { SendMessageError } from \"@/types/errors\";\nimport type { StreamErrorMessage, SendMessageOptions, DeleteMessage } from \"@/types/ipc\";\nimport { Ok, Err } from \"@/types/result\";\nimport { validateWorkspaceName } from \"@/utils/validation/workspaceValidation\";\nimport { createBashTool } from \"@/services/tools/bash\";\nimport type { BashToolResult } from \"@/types/tools\";\nimport { BASH_DEFAULT_MAX_LINES, BASH_HARD_MAX_LINES } from \"@/constants/toolLimits\";\n\nconst createUnknownSendMessageError = (raw: string): SendMessageError => ({\n  type: \"unknown\",\n  raw,\n});\n\n/**\n * IpcMain - Manages all IPC handlers and service coordination\n *\n * This class encapsulates:\n * - All ipcMain handler registration\n * - Service lifecycle management (AIService, HistoryService, PartialService)\n * - Event forwarding from services to renderer\n *\n * Design:\n * - Constructor accepts only Config for dependency injection\n * - Services are created internally from Config\n * - register() accepts ipcMain and BrowserWindow for handler setup\n */\nexport class IpcMain {\n  private readonly config: Config;\n  private readonly historyService: HistoryService;\n  private readonly partialService: PartialService;\n  private readonly aiService: AIService;\n  private mainWindow: BrowserWindow | null = null;\n\n  constructor(config: Config) {\n    this.config = config;\n    this.historyService = new HistoryService(config);\n    this.partialService = new PartialService(config, this.historyService);\n    this.aiService = new AIService(config, this.historyService, this.partialService);\n  }\n\n  /**\n   * Register all IPC handlers and setup event forwarding\n   * @param ipcMain - Electron's ipcMain module\n   * @param mainWindow - The main BrowserWindow for sending events\n   */\n  register(ipcMain: ElectronIpcMain, mainWindow: BrowserWindow): void {\n    this.mainWindow = mainWindow;\n    this.registerConfigHandlers(ipcMain);\n    this.registerDialogHandlers(ipcMain);\n    this.registerWorkspaceHandlers(ipcMain);\n    this.registerProviderHandlers(ipcMain);\n    this.registerSubscriptionHandlers(ipcMain);\n    this.setupEventForwarding();\n  }\n\n  private registerConfigHandlers(ipcMain: ElectronIpcMain): void {\n    ipcMain.handle(IPC_CHANNELS.CONFIG_LOAD, () => {\n      const projectsConfig = this.config.loadConfigOrDefault();\n      return {\n        projects: Array.from(projectsConfig.projects.entries()),\n      };\n    });\n\n    ipcMain.handle(\n      IPC_CHANNELS.CONFIG_SAVE,\n      (_event, configData: { projects: Array<[string, ProjectConfig]> }) => {\n        const projectsConfig = {\n          projects: new Map(configData.projects),\n        };\n        this.config.saveConfig(projectsConfig);\n        return true;\n      }\n    );\n  }\n\n  private registerDialogHandlers(ipcMain: ElectronIpcMain): void {\n    ipcMain.handle(IPC_CHANNELS.DIALOG_SELECT_DIR, async () => {\n      if (!this.mainWindow) return null;\n\n      // Dynamic import to avoid issues with electron mocks in tests\n      // eslint-disable-next-line no-restricted-syntax\n      const { dialog } = await import(\"electron\");\n\n      const result = await dialog.showOpenDialog(this.mainWindow, {\n        properties: [\"openDirectory\"],\n      });\n\n      if (result.canceled) {\n        return null;\n      }\n\n      return result.filePaths[0];\n    });\n  }\n\n  private registerWorkspaceHandlers(ipcMain: ElectronIpcMain): void {\n    ipcMain.handle(\n      IPC_CHANNELS.WORKSPACE_CREATE,\n      async (_event, projectPath: string, branchName: string) => {\n        // Validate workspace name\n        const validation = validateWorkspaceName(branchName);\n        if (!validation.valid) {\n          return { success: false, error: validation.error };\n        }\n\n        // First create the git worktree\n        const result = await createWorktree(this.config, projectPath, branchName);\n\n        if (result.success && result.path) {\n          const projectName =\n            projectPath.split(\"/\").pop() ?? projectPath.split(\"\\\\\").pop() ?? \"unknown\";\n\n          // Generate workspace ID using central method\n          const workspaceId = this.config.generateWorkspaceId(projectPath, result.path);\n\n          // Initialize workspace metadata\n          const metadata = {\n            id: workspaceId,\n            projectName,\n            workspacePath: result.path,\n          };\n          await this.aiService.saveWorkspaceMetadata(workspaceId, metadata);\n\n          // Emit metadata event for new workspace\n          this.mainWindow?.webContents.send(IPC_CHANNELS.WORKSPACE_METADATA, {\n            workspaceId,\n            metadata,\n          });\n\n          return {\n            success: true,\n            metadata,\n          };\n        }\n\n        return { success: false, error: result.error ?? \"Failed to create workspace\" };\n      }\n    );\n\n    ipcMain.handle(IPC_CHANNELS.WORKSPACE_REMOVE, async (_event, workspaceId: string) => {\n      try {\n        // Load current config\n        const projectsConfig = this.config.loadConfigOrDefault();\n\n        // Find workspace path from config by generating IDs\n        let workspacePath: string | null = null;\n        let foundProjectPath: string | null = null;\n\n        for (const [projectPath, projectConfig] of projectsConfig.projects.entries()) {\n          for (const workspace of projectConfig.workspaces) {\n            const generatedId = this.config.generateWorkspaceId(projectPath, workspace.path);\n            if (generatedId === workspaceId) {\n              workspacePath = workspace.path;\n              foundProjectPath = projectPath;\n              break;\n            }\n          }\n          if (workspacePath) break;\n        }\n\n        // Remove git worktree if we found the path\n        if (workspacePath) {\n          const worktreeExists = await fsPromises\n            .access(workspacePath)\n            .then(() => true)\n            .catch(() => false);\n\n          if (worktreeExists) {\n            const gitResult = await removeWorktree(workspacePath, { force: false });\n            if (!gitResult.success) {\n              const errorMessage = gitResult.error ?? \"Unknown error\";\n              const normalizedError = errorMessage.toLowerCase();\n              const looksLikeMissingWorktree =\n                normalizedError.includes(\"not a working tree\") ||\n                normalizedError.includes(\"does not exist\") ||\n                normalizedError.includes(\"no such file\");\n\n              if (looksLikeMissingWorktree) {\n                if (foundProjectPath) {\n                  const pruneResult = await pruneWorktrees(foundProjectPath);\n                  if (!pruneResult.success) {\n                    log.info(\n                      `Failed to prune stale worktrees for ${foundProjectPath} after removeWorktree error: ${\n                        pruneResult.error ?? \"unknown error\"\n                      }`\n                    );\n                  }\n                }\n              } else {\n                return gitResult;\n              }\n            }\n          } else if (foundProjectPath) {\n            const pruneResult = await pruneWorktrees(foundProjectPath);\n            if (!pruneResult.success) {\n              log.info(\n                `Failed to prune stale worktrees for ${foundProjectPath} after detecting missing workspace at ${workspacePath}: ${\n                  pruneResult.error ?? \"unknown error\"\n                }`\n              );\n            }\n          }\n        }\n\n        // Remove the workspace from AI service\n        const aiResult = await this.aiService.deleteWorkspace(workspaceId);\n        if (!aiResult.success) {\n          return { success: false, error: aiResult.error };\n        }\n\n        // Update config to remove the workspace\n        if (foundProjectPath && workspacePath) {\n          const projectConfig = projectsConfig.projects.get(foundProjectPath);\n          if (projectConfig) {\n            projectConfig.workspaces = projectConfig.workspaces.filter(\n              (w) => w.path !== workspacePath\n            );\n            this.config.saveConfig(projectsConfig);\n          }\n        }\n\n        // Emit metadata event for workspace removal (with null metadata to indicate deletion)\n        this.mainWindow?.webContents.send(IPC_CHANNELS.WORKSPACE_METADATA, {\n          workspaceId,\n          metadata: null, // null indicates workspace was deleted\n        });\n\n        return { success: true };\n      } catch (error) {\n        const message = error instanceof Error ? error.message : String(error);\n        return { success: false, error: `Failed to remove workspace: ${message}` };\n      }\n    });\n\n    ipcMain.handle(\n      IPC_CHANNELS.WORKSPACE_RENAME,\n      async (_event, workspaceId: string, newName: string) => {\n        try {\n          // Validate workspace name\n          const validation = validateWorkspaceName(newName);\n          if (!validation.valid) {\n            return Err(validation.error ?? \"Invalid workspace name\");\n          }\n\n          // Block rename if there's an active stream\n          if (this.aiService.isStreaming(workspaceId)) {\n            return Err(\n              \"Cannot rename workspace while stream is active. Press Esc to stop the stream first.\"\n            );\n          }\n\n          // Get current metadata\n          const metadataResult = await this.aiService.getWorkspaceMetadata(workspaceId);\n          if (!metadataResult.success) {\n            return Err(`Failed to get workspace metadata: ${metadataResult.error}`);\n          }\n          const oldMetadata = metadataResult.data;\n\n          // Calculate new workspace ID\n          const newWorkspaceId = `${oldMetadata.projectName}-${newName}`;\n\n          // If renaming to itself, just return success (no-op)\n          if (newWorkspaceId === workspaceId) {\n            return Ok({ newWorkspaceId });\n          }\n\n          // Check if new workspace ID already exists\n          const existingMetadata = await this.aiService.getWorkspaceMetadata(newWorkspaceId);\n          if (existingMetadata.success) {\n            return Err(`Workspace with name \"${newName}\" already exists`);\n          }\n\n          // Get old and new session directory paths\n          const oldSessionDir = this.config.getSessionDir(workspaceId);\n          const newSessionDir = this.config.getSessionDir(newWorkspaceId);\n\n          // Find project path from config (needed for git operations)\n          const projectsConfig = this.config.loadConfigOrDefault();\n          let foundProjectPath: string | null = null;\n          let workspaceIndex = -1;\n\n          for (const [projectPath, projectConfig] of projectsConfig.projects.entries()) {\n            const idx = projectConfig.workspaces.findIndex((w) => {\n              const generatedId = this.config.generateWorkspaceId(projectPath, w.path);\n              return generatedId === workspaceId;\n            });\n\n            if (idx !== -1) {\n              foundProjectPath = projectPath;\n              workspaceIndex = idx;\n              break;\n            }\n          }\n\n          if (!foundProjectPath) {\n            return Err(\"Failed to find project path for workspace\");\n          }\n\n          // Rename session directory\n          await fsPromises.rename(oldSessionDir, newSessionDir);\n\n          // Migrate workspace IDs in history messages\n          const migrateResult = await this.historyService.migrateWorkspaceId(\n            workspaceId,\n            newWorkspaceId\n          );\n          if (!migrateResult.success) {\n            // Rollback session directory rename\n            await fsPromises.rename(newSessionDir, oldSessionDir);\n            return Err(`Failed to migrate message workspace IDs: ${migrateResult.error}`);\n          }\n\n          // Calculate new worktree path\n          const oldWorktreePath = oldMetadata.workspacePath;\n          const newWorktreePath = path.join(\n            path.dirname(oldWorktreePath),\n            newName // Use newName as the directory name\n          );\n\n          // Move worktree directory\n          const moveResult = await moveWorktree(foundProjectPath, oldWorktreePath, newWorktreePath);\n          if (!moveResult.success) {\n            // Rollback session directory rename\n            await fsPromises.rename(newSessionDir, oldSessionDir);\n            return Err(`Failed to move worktree: ${moveResult.error}`);\n          }\n\n          // Update metadata with new ID and path\n          const newMetadata = {\n            id: newWorkspaceId,\n            projectName: oldMetadata.projectName,\n            workspacePath: newWorktreePath,\n          };\n\n          const saveResult = await this.aiService.saveWorkspaceMetadata(\n            newWorkspaceId,\n            newMetadata\n          );\n          if (!saveResult.success) {\n            // Rollback worktree and session directory\n            await moveWorktree(foundProjectPath, newWorktreePath, oldWorktreePath);\n            await fsPromises.rename(newSessionDir, oldSessionDir);\n            return Err(`Failed to save new metadata: ${saveResult.error}`);\n          }\n\n          // Update config with new workspace info using atomic edit\n          this.config.editConfig((config) => {\n            const projectConfig = config.projects.get(foundProjectPath);\n            if (projectConfig && workspaceIndex !== -1) {\n              projectConfig.workspaces[workspaceIndex] = {\n                path: newWorktreePath,\n              };\n            }\n            return config;\n          });\n\n          // Emit metadata event for old workspace deletion\n          this.mainWindow?.webContents.send(IPC_CHANNELS.WORKSPACE_METADATA, {\n            workspaceId,\n            metadata: null,\n          });\n\n          // Emit metadata event for new workspace\n          this.mainWindow?.webContents.send(IPC_CHANNELS.WORKSPACE_METADATA, {\n            workspaceId: newWorkspaceId,\n            metadata: newMetadata,\n          });\n\n          return Ok({ newWorkspaceId });\n        } catch (error) {\n          const message = error instanceof Error ? error.message : String(error);\n          return Err(`Failed to rename workspace: ${message}`);\n        }\n      }\n    );\n\n    ipcMain.handle(IPC_CHANNELS.WORKSPACE_LIST, () => {\n      try {\n        return this.config.getAllWorkspaceMetadata();\n      } catch (error) {\n        console.error(\"Failed to list workspaces:\", error);\n        return [];\n      }\n    });\n\n    ipcMain.handle(IPC_CHANNELS.WORKSPACE_GET_INFO, async (_event, workspaceId: string) => {\n      const result = await this.aiService.getWorkspaceMetadata(workspaceId);\n      return result.success ? result.data : null;\n    });\n\n    ipcMain.handle(\n      IPC_CHANNELS.WORKSPACE_SEND_MESSAGE,\n      async (_event, workspaceId: string, message: string, options?: SendMessageOptions) => {\n        const {\n          editMessageId,\n          thinkingLevel,\n          model,\n          toolPolicy,\n          additionalSystemInstructions,\n          maxOutputTokens,\n        } = options ?? {};\n        log.debug(\"sendMessage handler: Received\", {\n          workspaceId,\n          messagePreview: message.substring(0, 50),\n          editMessageId,\n          thinkingLevel,\n          model,\n          toolPolicy,\n          additionalSystemInstructions,\n          maxOutputTokens,\n        });\n        try {\n          // Early exit: empty message = either interrupt (if streaming) or invalid input\n          // This prevents race conditions where empty messages arrive after streaming stops\n          if (!message.trim()) {\n            // If streaming, this is an interrupt request (from Esc key)\n            if (this.aiService.isStreaming(workspaceId)) {\n              log.debug(\"sendMessage handler: Empty message during streaming, interrupting\");\n              const stopResult = await this.aiService.stopStream(workspaceId);\n              if (!stopResult.success) {\n                log.error(\"Failed to stop stream:\", stopResult.error);\n                return {\n                  success: false,\n                  error: createUnknownSendMessageError(stopResult.error),\n                };\n              }\n              return { success: true };\n            }\n\n            // If not streaming, reject empty message to prevent creating empty user messages\n            log.debug(\"sendMessage handler: Rejected empty message (not streaming)\");\n            return { success: true }; // Return success to avoid error notification in UI\n          }\n\n          // If editing, truncate history after the message being edited\n          if (editMessageId) {\n            const truncateResult = await this.historyService.truncateAfterMessage(\n              workspaceId,\n              editMessageId\n            );\n            if (!truncateResult.success) {\n              log.error(\"Failed to truncate history for edit:\", truncateResult.error);\n              return {\n                success: false,\n                error: createUnknownSendMessageError(truncateResult.error),\n              };\n            }\n            // Note: We don't send a clear event here. The aggregator will handle\n            // replacement automatically when the new message arrives with the same historySequence\n          }\n\n          // Create user message\n          const messageId = `user-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`;\n          const userMessage = createCmuxMessage(messageId, \"user\", message, {\n            // historySequence will be assigned by historyService.appendToHistory()\n            timestamp: Date.now(),\n            toolPolicy, // Store for historical record and compaction detection\n          });\n\n          // Append user message to history\n          const appendResult = await this.historyService.appendToHistory(workspaceId, userMessage);\n          if (!appendResult.success) {\n            log.error(\"Failed to append message to history:\", appendResult.error);\n            return {\n              success: false,\n              error: createUnknownSendMessageError(appendResult.error),\n            };\n          }\n\n          // Broadcast the user message immediately to the frontend\n          if (this.mainWindow) {\n            this.mainWindow.webContents.send(getChatChannel(workspaceId), userMessage);\n          }\n\n          // Commit any existing partial to history BEFORE loading\n          // This ensures interrupted messages are included in the AI's context\n          await this.partialService.commitToHistory(workspaceId);\n\n          // Get full conversation history\n          const historyResult = await this.historyService.getHistory(workspaceId);\n          if (!historyResult.success) {\n            log.error(\"Failed to get conversation history:\", historyResult.error);\n            return {\n              success: false,\n              error: createUnknownSendMessageError(historyResult.error),\n            };\n          }\n\n          // Stream the AI response\n          if (!model) {\n            log.error(\"No model provided by frontend\");\n            return {\n              success: false,\n              error: createUnknownSendMessageError(\n                \"No model specified. Please select a model using /model command.\"\n              ),\n            };\n          }\n          log.debug(\"sendMessage handler: Calling aiService.streamMessage with thinkingLevel\", {\n            thinkingLevel,\n            model,\n            toolPolicy,\n            additionalSystemInstructions,\n            maxOutputTokens,\n          });\n          const streamResult = await this.aiService.streamMessage(\n            historyResult.data,\n            workspaceId,\n            model,\n            thinkingLevel,\n            toolPolicy,\n            undefined,\n            additionalSystemInstructions,\n            maxOutputTokens\n          );\n          log.debug(\"sendMessage handler: Stream completed\");\n          return streamResult;\n        } catch (error) {\n          // Convert to SendMessageError for typed error handling\n          const errorMessage = error instanceof Error ? error.message : String(error);\n          log.error(\"Unexpected error in sendMessage handler:\", error);\n          const sendError: SendMessageError = {\n            type: \"unknown\",\n            raw: `Failed to send message: ${errorMessage}`,\n          };\n          return { success: false, error: sendError };\n        }\n      }\n    );\n\n    ipcMain.handle(\n      IPC_CHANNELS.WORKSPACE_TRUNCATE_HISTORY,\n      async (_event, workspaceId: string, percentage?: number) => {\n        // Block truncate if there's an active stream\n        // User must press Esc first to stop stream and commit partial to history\n        if (this.aiService.isStreaming(workspaceId)) {\n          return {\n            success: false,\n            error:\n              \"Cannot truncate history while stream is active. Press Esc to stop the stream first.\",\n          };\n        }\n\n        // Truncate chat.jsonl (only operates on committed history)\n        // Note: partial.json is NOT touched here - it has its own lifecycle\n        // Interrupted messages are committed to history by stream-abort handler\n        const truncateResult = await this.historyService.truncateHistory(\n          workspaceId,\n          percentage ?? 1.0\n        );\n        if (!truncateResult.success) {\n          return { success: false, error: truncateResult.error };\n        }\n\n        // Send DeleteMessage event to frontend with deleted historySequence numbers\n        const deletedSequences = truncateResult.data;\n        if (deletedSequences.length > 0 && this.mainWindow) {\n          const deleteMessage: DeleteMessage = {\n            type: \"delete\",\n            historySequences: deletedSequences,\n          };\n          this.mainWindow.webContents.send(getChatChannel(workspaceId), deleteMessage);\n        }\n\n        return { success: true, data: undefined };\n      }\n    );\n\n    ipcMain.handle(\n      IPC_CHANNELS.WORKSPACE_REPLACE_HISTORY,\n      async (_event, workspaceId: string, summaryMessage: CmuxMessage) => {\n        // Block replace if there's an active stream, UNLESS this is a compacted message\n        // (which is called from stream-end handler before stream cleanup completes)\n        const isCompaction = summaryMessage.metadata?.compacted === true;\n        if (!isCompaction && this.aiService.isStreaming(workspaceId)) {\n          return Err(\n            \"Cannot replace history while stream is active. Press Esc to stop the stream first.\"\n          );\n        }\n\n        try {\n          // Get all existing messages to collect their historySequence numbers\n          const historyResult = await this.historyService.getHistory(workspaceId);\n          const deletedSequences = historyResult.success\n            ? historyResult.data\n                .map((msg) => msg.metadata?.historySequence ?? -1)\n                .filter((s) => s >= 0)\n            : [];\n\n          // Clear entire history\n          const clearResult = await this.historyService.clearHistory(workspaceId);\n          if (!clearResult.success) {\n            return Err(`Failed to clear history: ${clearResult.error}`);\n          }\n\n          // Append the summary message to history (gets historySequence assigned by backend)\n          // Frontend provides the message with all metadata (compacted, timestamp, etc.)\n          const appendResult = await this.historyService.appendToHistory(\n            workspaceId,\n            summaryMessage\n          );\n          if (!appendResult.success) {\n            return Err(`Failed to append summary: ${appendResult.error}`);\n          }\n\n          // Send delete event to frontend for all old messages\n          if (deletedSequences.length > 0 && this.mainWindow) {\n            const deleteMessage: DeleteMessage = {\n              type: \"delete\",\n              historySequences: deletedSequences,\n            };\n            this.mainWindow.webContents.send(getChatChannel(workspaceId), deleteMessage);\n          }\n\n          // Send the new summary message to frontend\n          if (this.mainWindow) {\n            this.mainWindow.webContents.send(getChatChannel(workspaceId), summaryMessage);\n          }\n\n          return Ok(undefined);\n        } catch (error) {\n          const message = error instanceof Error ? error.message : String(error);\n          return Err(`Failed to replace history: ${message}`);\n        }\n      }\n    );\n\n    ipcMain.handle(\n      IPC_CHANNELS.WORKSPACE_EXECUTE_BASH,\n      async (\n        _event,\n        workspaceId: string,\n        script: string,\n        options?: { timeout_secs?: number; max_lines?: number; stdin?: string }\n      ) => {\n        try {\n          // Get workspace metadata to find workspacePath\n          const metadataResult = await this.aiService.getWorkspaceMetadata(workspaceId);\n          if (!metadataResult.success) {\n            return Err(`Failed to get workspace metadata: ${metadataResult.error}`);\n          }\n\n          const workspacePath = metadataResult.data.workspacePath;\n\n          // Create bash tool with workspace's cwd\n          const bashTool = createBashTool({ cwd: workspacePath });\n\n          // Execute the script with provided options\n          const requestedMaxLines = options?.max_lines ?? BASH_DEFAULT_MAX_LINES;\n          const normalizedMaxLines = Math.max(1, Math.floor(requestedMaxLines));\n          const clampedMaxLines = Math.min(normalizedMaxLines, BASH_HARD_MAX_LINES);\n\n          const result = (await bashTool.execute!(\n            {\n              script,\n              timeout_secs: options?.timeout_secs ?? 120,\n              max_lines: clampedMaxLines,\n              stdin: options?.stdin,\n            },\n            {\n              toolCallId: `bash-${Date.now()}`,\n              messages: [],\n            }\n          )) as BashToolResult;\n\n          return Ok(result);\n        } catch (error) {\n          const message = error instanceof Error ? error.message : String(error);\n          return Err(`Failed to execute bash command: ${message}`);\n        }\n      }\n    );\n\n    ipcMain.handle(IPC_CHANNELS.WORKSPACE_OPEN_TERMINAL, (_event, workspacePath: string) => {\n      try {\n        if (process.platform === \"darwin\") {\n          // macOS - try Ghostty first, fallback to Terminal.app\n          try {\n            spawn(\"open\", [\"-a\", \"Ghostty\", workspacePath], { detached: true });\n          } catch {\n            spawn(\"open\", [\"-a\", \"Terminal\", workspacePath], { detached: true });\n          }\n        } else if (process.platform === \"win32\") {\n          // Windows\n          spawn(\"cmd\", [\"/c\", \"start\", \"cmd\", \"/K\", \"cd\", \"/D\", workspacePath], {\n            detached: true,\n            shell: true,\n          });\n        } else {\n          // Linux - try x-terminal-emulator, fallback to xterm\n          try {\n            spawn(\"x-terminal-emulator\", [], {\n              cwd: workspacePath,\n              detached: true,\n            });\n          } catch {\n            spawn(\"xterm\", [], { cwd: workspacePath, detached: true });\n          }\n        }\n      } catch (error) {\n        const message = error instanceof Error ? error.message : String(error);\n        log.error(`Failed to open terminal: ${message}`);\n      }\n    });\n  }\n\n  private registerProviderHandlers(ipcMain: ElectronIpcMain): void {\n    ipcMain.handle(\n      IPC_CHANNELS.PROVIDERS_SET_CONFIG,\n      (_event, provider: string, keyPath: string[], value: string) => {\n        try {\n          // Load current providers config or create empty\n          const providersConfig = this.config.loadProvidersConfig() ?? {};\n\n          // Ensure provider exists\n          if (!providersConfig[provider]) {\n            providersConfig[provider] = {};\n          }\n\n          // Set nested property value\n          let current = providersConfig[provider] as Record<string, unknown>;\n          for (let i = 0; i < keyPath.length - 1; i++) {\n            const key = keyPath[i];\n            if (!(key in current) || typeof current[key] !== \"object\" || current[key] === null) {\n              current[key] = {};\n            }\n            current = current[key] as Record<string, unknown>;\n          }\n\n          if (keyPath.length > 0) {\n            current[keyPath[keyPath.length - 1]] = value;\n          }\n\n          // Save updated config\n          this.config.saveProvidersConfig(providersConfig);\n\n          return { success: true, data: undefined };\n        } catch (error) {\n          const message = error instanceof Error ? error.message : String(error);\n          return { success: false, error: `Failed to set provider config: ${message}` };\n        }\n      }\n    );\n\n    ipcMain.handle(IPC_CHANNELS.PROVIDERS_LIST, () => {\n      try {\n        // Return all supported providers, not just configured ones\n        // This matches the providers defined in the registry\n        return [\"anthropic\", \"openai\", \"google\"];\n      } catch (error) {\n        log.error(\"Failed to list providers:\", error);\n        return [];\n      }\n    });\n  }\n\n  private registerSubscriptionHandlers(ipcMain: ElectronIpcMain): void {\n    // Handle subscription events for chat history\n    ipcMain.on(`workspace:chat:subscribe`, (_event, workspaceId: string) => {\n      void (async () => {\n        const chatChannel = getChatChannel(workspaceId);\n\n        const history = await this.historyService.getHistory(workspaceId);\n        if (history.success) {\n          for (const msg of history.data) {\n            this.mainWindow?.webContents.send(chatChannel, msg);\n          }\n\n          // Check if there's an active stream or a partial message\n          const streamInfo = this.aiService.getStreamInfo(workspaceId);\n          const partial = await this.partialService.readPartial(workspaceId);\n\n          if (streamInfo) {\n            // Stream is actively running - replay events to re-establish streaming context\n            // Events flow: StreamManager → AIService → IpcMain → renderer\n            // This ensures frontend receives stream-start and creates activeStream entry\n            // so that stream-end can properly clean up the streaming indicator\n            this.aiService.replayStream(workspaceId);\n          } else if (partial) {\n            // No active stream but there's a partial - send as regular message (shows INTERRUPTED)\n            this.mainWindow?.webContents.send(chatChannel, partial);\n          }\n        }\n\n        this.mainWindow?.webContents.send(chatChannel, { type: \"caught-up\" });\n      })();\n    });\n\n    // Handle subscription events for metadata\n    ipcMain.on(IPC_CHANNELS.WORKSPACE_METADATA_SUBSCRIBE, () => {\n      try {\n        const workspaceMetadata = this.config.getAllWorkspaceMetadata();\n\n        // Emit current metadata for each workspace\n        for (const metadata of workspaceMetadata) {\n          this.mainWindow?.webContents.send(IPC_CHANNELS.WORKSPACE_METADATA, {\n            workspaceId: metadata.id,\n            metadata,\n          });\n        }\n      } catch (error) {\n        console.error(\"Failed to emit current metadata:\", error);\n      }\n    });\n  }\n\n  private setupEventForwarding(): void {\n    // Set up event listeners for AI service\n    this.aiService.on(\"stream-start\", (data: StreamStartEvent) => {\n      if (this.mainWindow) {\n        // Send the actual stream-start event\n        this.mainWindow.webContents.send(getChatChannel(data.workspaceId), data);\n      }\n    });\n\n    this.aiService.on(\"stream-delta\", (data: StreamDeltaEvent) => {\n      if (this.mainWindow) {\n        // Send ONLY the delta event - efficient IPC usage\n        this.mainWindow.webContents.send(getChatChannel(data.workspaceId), data);\n      }\n    });\n\n    this.aiService.on(\"stream-end\", (data: StreamEndEvent) => {\n      if (this.mainWindow) {\n        // Send the stream-end event with final content and metadata\n        this.mainWindow.webContents.send(getChatChannel(data.workspaceId), data);\n      }\n    });\n\n    // Forward tool events to renderer\n    this.aiService.on(\"tool-call-start\", (data: ToolCallStartEvent) => {\n      if (this.mainWindow) {\n        this.mainWindow.webContents.send(getChatChannel(data.workspaceId), data);\n      }\n    });\n\n    this.aiService.on(\"tool-call-delta\", (data: ToolCallDeltaEvent) => {\n      if (this.mainWindow) {\n        this.mainWindow.webContents.send(getChatChannel(data.workspaceId), data);\n      }\n    });\n\n    this.aiService.on(\"tool-call-end\", (data: ToolCallEndEvent) => {\n      if (this.mainWindow) {\n        this.mainWindow.webContents.send(getChatChannel(data.workspaceId), data);\n      }\n    });\n\n    // Forward reasoning events to renderer\n    this.aiService.on(\n      \"reasoning-delta\",\n      (data: { type: string; workspaceId: string; messageId: string; delta: string }) => {\n        if (this.mainWindow) {\n          this.mainWindow.webContents.send(getChatChannel(data.workspaceId), data);\n        }\n      }\n    );\n\n    this.aiService.on(\n      \"reasoning-end\",\n      (data: { type: string; workspaceId: string; messageId: string }) => {\n        if (this.mainWindow) {\n          this.mainWindow.webContents.send(getChatChannel(data.workspaceId), data);\n        }\n      }\n    );\n\n    this.aiService.on(\"error\", (data: ErrorEvent) => {\n      if (this.mainWindow) {\n        // Send properly typed StreamErrorMessage\n        const errorMessage: StreamErrorMessage = {\n          type: \"stream-error\",\n          messageId: data.messageId,\n          error: data.error,\n          errorType: data.errorType ?? \"unknown\",\n        };\n        this.mainWindow.webContents.send(getChatChannel(data.workspaceId), errorMessage);\n      }\n    });\n\n    // Handle stream abort events\n    this.aiService.on(\n      \"stream-abort\",\n      (data: { type: string; workspaceId: string; messageId?: string }) => {\n        if (this.mainWindow) {\n          // Send the stream-abort event to frontend\n          this.mainWindow.webContents.send(getChatChannel(data.workspaceId), {\n            type: \"stream-abort\",\n            workspaceId: data.workspaceId,\n            messageId: data.messageId,\n          });\n        }\n      }\n    );\n  }\n}\n"]}