{"version":3,"file":"systemMessage.js","sourceRoot":"","sources":["../../src/services/systemMessage.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,gDAyCC;AA5FD,gDAAkC;AAClC,2CAA6B;AAG7B,qFAAqF;AACrF,+FAA+F;AAC/F,uBAAuB;AACvB,MAAM,OAAO,GAAG;;;;;;;;;;;;;CAaf,CAAC;AAEF,SAAS,uBAAuB,CAAC,aAAqB;IACpD,OAAO;;+BAEsB,aAAa;;;;;;;CAO3C,CAAC;AACF,CAAC;AAED,MAAM,wBAAwB,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;AAExE;;;;;;;;;;;;;GAaG;AACI,KAAK,UAAU,kBAAkB,CACtC,QAA2B,EAC3B,4BAAqC;IAErC,0BAA0B;IAC1B,IAAI,CAAC,QAAQ,EAAE,aAAa,EAAE,CAAC;QAC7B,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;IAC3E,CAAC;IAED,MAAM,kBAAkB,GAAG,uBAAuB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;IAC3E,IAAI,kBAAkB,GAAG,EAAE,CAAC;IAE5B,gDAAgD;IAChD,KAAK,MAAM,QAAQ,IAAI,wBAAwB,EAAE,CAAC;QAChD,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;YAC7D,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YACrD,kBAAkB,GAAG,OAAO,CAAC;YAC7B,MAAM,CAAC,uBAAuB;YAC9B,6DAA6D;QAC/D,CAAC;QAAC,OAAO,MAAM,EAAE,CAAC;YAChB,qDAAqD;YACrD,SAAS;QACX,CAAC;IACH,CAAC;IAED,iCAAiC;IACjC,MAAM,cAAc,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;IACtC,IAAI,aAAa,GAAG,GAAG,cAAc,OAAO,kBAAkB,EAAE,CAAC;IAEjE,mCAAmC;IACnC,IAAI,kBAAkB,EAAE,CAAC;QACvB,aAAa,IAAI,4BAA4B,kBAAkB,0BAA0B,CAAC;IAC5F,CAAC;IAED,mEAAmE;IACnE,IAAI,4BAA4B,EAAE,CAAC;QACjC,aAAa,IAAI,kCAAkC,4BAA4B,8BAA8B,CAAC;IAChH,CAAC;IAED,OAAO,aAAa,CAAC;AACvB,CAAC","sourcesContent":["import * as fs from \"fs/promises\";\nimport * as path from \"path\";\nimport type { WorkspaceMetadata } from \"@/types/workspace\";\n\n// The PRELUDE is intentionally minimal to not conflict with the user's instructions.\n// cmux is designed to be model agnostic, and models have shown large inconsistency in how they\n// follow instructions.\nconst PRELUDE = `\n<prelude>\nYou are a coding agent.\n  \nYour Assistant messages display in Markdown with extensions for mermaidjs and katex.\n\nWhen creating mermaid diagrams:\n- Avoid side-by-side subgraphs (they display too wide)\n- For comparisons, use separate diagram blocks or single graph with visual separation\n- When using custom fill colors, include contrasting color property (e.g., \"style note fill:#ff6b6b,color:#fff\")\n- Make good use of visual space: e.g. use inline commentary\n- Wrap node labels containing brackets or special characters in quotes (e.g., Display[\"Message[]\"] not Display[Message[]])\n</prelude>\n`;\n\nfunction buildEnvironmentContext(workspacePath: string): string {\n  return `\n<environment>\nYou are in a git worktree at ${workspacePath}\n\n- This IS a git repository - run git commands directly (no cd needed)\n- Tools run here automatically\n- Do not modify or visit other worktrees (especially the main project) without explicit user intent\n- You are meant to do your work isolated from the user and other agents\n</environment>\n`;\n}\n\nconst CUSTOM_INSTRUCTION_FILES = [\"AGENTS.md\", \"AGENT.md\", \"CLAUDE.md\"];\n\n/**\n * Builds a system message for the AI model by combining a placeholder message\n * with custom instructions from the workspace (if found).\n *\n * Searches for custom instruction files in priority order:\n * 1. AGENTS.md\n * 2. AGENT.md\n * 3. CLAUDE.md\n *\n * @param metadata - Workspace metadata containing the workspace path\n * @param additionalSystemInstructions - Optional additional system instructions to append at the end\n * @returns System message string (placeholder + custom instructions if found + additional instructions)\n * @throws Error if metadata is invalid or workspace path is missing\n */\nexport async function buildSystemMessage(\n  metadata: WorkspaceMetadata,\n  additionalSystemInstructions?: string\n): Promise<string> {\n  // Validate metadata early\n  if (!metadata?.workspacePath) {\n    throw new Error(\"Invalid workspace metadata: workspacePath is required\");\n  }\n\n  const environmentContext = buildEnvironmentContext(metadata.workspacePath);\n  let customInstructions = \"\";\n\n  // Try to read custom instruction files in order\n  for (const filename of CUSTOM_INSTRUCTION_FILES) {\n    try {\n      const filePath = path.join(metadata.workspacePath, filename);\n      const content = await fs.readFile(filePath, \"utf-8\");\n      customInstructions = content;\n      break; // Use first found file\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (_error) {\n      // File doesn't exist or can't be read, try next file\n      continue;\n    }\n  }\n\n  // Build the final system message\n  const trimmedPrelude = PRELUDE.trim();\n  let systemMessage = `${trimmedPrelude}\\n\\n${environmentContext}`;\n\n  // Add custom instructions if found\n  if (customInstructions) {\n    systemMessage += `\\n<custom-instructions>\\n${customInstructions}\\n</custom-instructions>`;\n  }\n\n  // Add additional system instructions at the end (highest priority)\n  if (additionalSystemInstructions) {\n    systemMessage += `\\n\\n<additional-instructions>\\n${additionalSystemInstructions}\\n</additional-instructions>`;\n  }\n\n  return systemMessage;\n}\n"]}