{"version":3,"file":"config.js","sourceRoot":"","sources":["../src/config.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as os from \"os\";\nimport * as jsonc from \"jsonc-parser\";\nimport writeFileAtomic from \"write-file-atomic\";\nimport type { WorkspaceMetadata } from \"./types/workspace\";\n\nexport interface Workspace {\n  path: string; // Absolute path to workspace worktree\n  // NOTE: Workspace ID is NOT stored here - it's generated on-demand from path\n  // using generateWorkspaceId(). This ensures single source of truth for ID format.\n}\n\nexport interface ProjectConfig {\n  path: string;\n  workspaces: Workspace[];\n}\n\nexport interface ProjectsConfig {\n  projects: Map<string, ProjectConfig>;\n}\n\nexport interface ProviderConfig {\n  apiKey?: string;\n  baseUrl?: string;\n  [key: string]: unknown;\n}\n\nexport type ProvidersConfig = Record<string, ProviderConfig>;\n\n/**\n * Config - Centralized configuration management\n *\n * Encapsulates all config paths and operations, making them dependency-injectable\n * and testable. Pass a custom rootDir for tests to avoid polluting ~/.cmux\n */\nexport class Config {\n  readonly rootDir: string;\n  readonly sessionsDir: string;\n  readonly srcDir: string;\n  private readonly configFile: string;\n  private readonly providersFile: string;\n\n  constructor(rootDir?: string) {\n    this.rootDir = rootDir ?? path.join(os.homedir(), \".cmux\");\n    this.sessionsDir = path.join(this.rootDir, \"sessions\");\n    this.srcDir = path.join(this.rootDir, \"src\");\n    this.configFile = path.join(this.rootDir, \"config.json\");\n    this.providersFile = path.join(this.rootDir, \"providers.jsonc\");\n  }\n\n  loadConfigOrDefault(): ProjectsConfig {\n    try {\n      if (fs.existsSync(this.configFile)) {\n        const data = fs.readFileSync(this.configFile, \"utf-8\");\n        const parsed = JSON.parse(data) as { projects?: unknown };\n\n        // Config is stored as array of [path, config] pairs\n        if (parsed.projects && Array.isArray(parsed.projects)) {\n          const projectsMap = new Map<string, ProjectConfig>(\n            parsed.projects as Array<[string, ProjectConfig]>\n          );\n          return {\n            projects: projectsMap,\n          };\n        }\n      }\n    } catch (error) {\n      console.error(\"Error loading config:\", error);\n    }\n\n    // Return default config\n    return {\n      projects: new Map(),\n    };\n  }\n\n  saveConfig(config: ProjectsConfig): void {\n    try {\n      if (!fs.existsSync(this.rootDir)) {\n        fs.mkdirSync(this.rootDir, { recursive: true });\n      }\n\n      const data = {\n        projects: Array.from(config.projects.entries()),\n      };\n\n      writeFileAtomic.sync(this.configFile, JSON.stringify(data, null, 2));\n    } catch (error) {\n      console.error(\"Error saving config:\", error);\n    }\n  }\n\n  /**\n   * Edit config atomically using a transformation function\n   * @param fn Function that takes current config and returns modified config\n   */\n  editConfig(fn: (config: ProjectsConfig) => ProjectsConfig): void {\n    const config = this.loadConfigOrDefault();\n    const newConfig = fn(config);\n    this.saveConfig(newConfig);\n  }\n\n  private getProjectName(projectPath: string): string {\n    return projectPath.split(\"/\").pop() ?? projectPath.split(\"\\\\\").pop() ?? \"unknown\";\n  }\n\n  /**\n   * Generate workspace ID from project and workspace paths.\n   * This is the CENTRAL place for workspace ID generation.\n   * Format: ${projectBasename}-${workspaceBasename}\n   *\n   * NEVER duplicate this logic elsewhere - always call this method.\n   */\n  generateWorkspaceId(projectPath: string, workspacePath: string): string {\n    const projectBasename = this.getProjectName(projectPath);\n    const workspaceBasename =\n      workspacePath.split(\"/\").pop() ?? workspacePath.split(\"\\\\\").pop() ?? \"unknown\";\n    return `${projectBasename}-${workspaceBasename}`;\n  }\n\n  getWorkspacePath(projectPath: string, branch: string): string {\n    const projectName = this.getProjectName(projectPath);\n    return path.join(this.srcDir, projectName, branch);\n  }\n\n  /**\n   * Find a workspace path and project path by workspace ID\n   * @returns Object with workspace and project paths, or null if not found\n   */\n  findWorkspace(workspaceId: string): { workspacePath: string; projectPath: string } | null {\n    const config = this.loadConfigOrDefault();\n\n    for (const [projectPath, project] of config.projects) {\n      for (const workspace of project.workspaces) {\n        const generatedId = this.generateWorkspaceId(projectPath, workspace.path);\n        if (generatedId === workspaceId) {\n          return { workspacePath: workspace.path, projectPath };\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * WARNING: Never try to derive workspace path from workspace ID!\n   * This is a code smell that leads to bugs.\n   *\n   * The workspace path should always:\n   * 1. Be stored in WorkspaceMetadata when the workspace is created\n   * 2. Be retrieved from WorkspaceMetadata when needed\n   * 3. Be passed through the call stack explicitly\n   *\n   * Parsing workspaceId strings to derive paths is fragile and error-prone.\n   * The workspace path is established when the git worktree is created,\n   * and that canonical path should be preserved and used throughout.\n   */\n\n  /**\n   * Get the session directory for a specific workspace\n   */\n  getSessionDir(workspaceId: string): string {\n    return path.join(this.sessionsDir, workspaceId);\n  }\n\n  /**\n   * Get all workspace metadata by loading config and generating IDs.\n   * This is the CENTRAL place for workspace ID generation.\n   *\n   * IDs are generated using the formula: ${projectBasename}-${workspaceBasename}\n   * This ensures single source of truth and makes config format migration-free.\n   */\n  getAllWorkspaceMetadata(): WorkspaceMetadata[] {\n    const config = this.loadConfigOrDefault();\n    const workspaceMetadata: WorkspaceMetadata[] = [];\n\n    for (const [projectPath, projectConfig] of config.projects) {\n      const projectName = this.getProjectName(projectPath);\n\n      for (const workspace of projectConfig.workspaces) {\n        const workspaceId = this.generateWorkspaceId(projectPath, workspace.path);\n\n        workspaceMetadata.push({\n          id: workspaceId,\n          projectName,\n          workspacePath: workspace.path,\n        });\n      }\n    }\n\n    return workspaceMetadata;\n  }\n\n  /**\n   * Load providers configuration from JSONC file\n   * Supports comments in JSONC format\n   */\n  loadProvidersConfig(): ProvidersConfig | null {\n    try {\n      if (fs.existsSync(this.providersFile)) {\n        const data = fs.readFileSync(this.providersFile, \"utf-8\");\n        return jsonc.parse(data) as ProvidersConfig;\n      }\n    } catch (error) {\n      console.error(\"Error loading providers config:\", error);\n    }\n\n    return null;\n  }\n\n  /**\n   * Save providers configuration to JSONC file\n   * @param config The providers configuration to save\n   */\n  saveProvidersConfig(config: ProvidersConfig): void {\n    try {\n      if (!fs.existsSync(this.rootDir)) {\n        fs.mkdirSync(this.rootDir, { recursive: true });\n      }\n\n      // Format with 2-space indentation for readability\n      const jsonString = JSON.stringify(config, null, 2);\n\n      // Add a comment header to the file\n      const contentWithComments = `// Providers configuration for cmux\n// Configure your AI providers here\n// Example:\n// {\n//   \"anthropic\": {\n//     \"apiKey\": \"sk-...\",\n//     \"baseUrl\": \"https://api.anthropic.com\"\n//   }\n// }\n${jsonString}`;\n\n      fs.writeFileSync(this.providersFile, contentWithComments);\n    } catch (error) {\n      console.error(\"Error saving providers config:\", error);\n      throw error; // Re-throw to let caller handle\n    }\n  }\n}\n\n// Default instance for application use\nexport const defaultConfig = new Config();\n"]}