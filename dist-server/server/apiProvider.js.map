{"version":3,"file":"apiProvider.js","sourceRoot":"","sources":["../../src/server/apiProvider.ts"],"names":[],"mappings":";;;AAMA,qCAAkC;AAElC,4CAA4C;AAC5C,MAAM,UAAU,GAAG,OAAO,MAAM,KAAK,WAAW,IAAI,KAAK,IAAI,MAAM,IAAI,MAAM,CAAC,GAAG,KAAK,SAAS,CAAC;AAEhG,kCAAkC;AAClC,MAAM,WAAW,GAAG,GAAW,EAAE;IAC/B,IAAI,OAAO,SAAS,KAAK,WAAW;QAAE,OAAO,SAAS,CAAC;IAEvD,MAAM,EAAE,GAAG,SAAS,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;IAC7C,IAAI,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC;QAAE,OAAO,QAAQ,CAAC;IACxC,IAAI,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC;QAAE,OAAO,OAAO,CAAC;IACvC,IAAI,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC;QAAE,OAAO,OAAO,CAAC;IACzC,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,6CAA6C;AAC7C,MAAM,WAAW,GAAG;IAClB,IAAI,EAAE,KAAK;IACX,MAAM,EAAE,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK;IACnE,QAAQ,EAAE,gBAAgB;CAC3B,CAAC;AAEF,kDAAkD;AACrC,QAAA,GAAG,GAOZ,UAAU;IACZ,CAAC,CAAC,MAAM,CAAC,GAAG;IACZ,CAAC,CAAC;QACE,GAAG,eAAM;QACT,QAAQ,EAAE,WAAW,EAAE;QACvB,QAAQ,EAAE,WAAW;KACtB,CAAC;AAEO,QAAA,SAAS,GAAG,CAAC,UAAU,CAAC;AAErC,gBAAgB;AAChB,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;IAClC,OAAO,CAAC,GAAG,CAAC,cAAc,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC;IAClE,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,WAAG,CAAC,QAAQ,CAAC,CAAC;IACvC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,WAAG,CAAC,QAAQ,CAAC,CAAC;AACzC,CAAC","sourcesContent":["/**\n * API Provider - Detects environment and provides the appropriate API\n * In Electron: uses window.api (from preload script)\n * In Web: uses webApi (HTTP/WebSocket)\n */\nimport type { IPCApi } from \"../types/ipc\";\nimport { webApi } from \"./webApi\";\n\n// Check if we're running in Electron or Web\nconst isElectron = typeof window !== \"undefined\" && \"api\" in window && window.api !== undefined;\n\n// Platform detection for web mode\nconst getPlatform = (): string => {\n  if (typeof navigator === \"undefined\") return \"unknown\";\n  \n  const ua = navigator.userAgent.toLowerCase();\n  if (ua.includes(\"mac\")) return \"darwin\";\n  if (ua.includes(\"win\")) return \"win32\";\n  if (ua.includes(\"linux\")) return \"linux\";\n  return \"unknown\";\n};\n\n// Create a mock versions object for web mode\nconst webVersions = {\n  node: \"N/A\",\n  chrome: navigator.userAgent.match(/Chrome\\/([\\d.]+)/)?.[1] || \"N/A\",\n  electron: \"N/A (Web Mode)\",\n};\n\n// Export the appropriate API based on environment\nexport const api: IPCApi & {\n  platform: string;\n  versions: {\n    node: string;\n    chrome: string;\n    electron: string;\n  };\n} = isElectron\n  ? window.api\n  : {\n      ...webApi,\n      platform: getPlatform(),\n      versions: webVersions,\n    };\n\nexport const isWebMode = !isElectron;\n\n// For debugging\nif (typeof window !== \"undefined\") {\n  console.log(`Running in ${isElectron ? \"Electron\" : \"Web\"} mode`);\n  console.log(\"Platform:\", api.platform);\n  console.log(\"Versions:\", api.versions);\n}\n"]}