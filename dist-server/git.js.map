{"version":3,"file":"git.js","sourceRoot":"","sources":["../src/git.ts"],"names":[],"mappings":"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","sourcesContent":["import { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport type { Config } from \"./config\";\n\nconst execAsync = promisify(exec);\n\nexport interface WorktreeResult {\n  success: boolean;\n  path?: string;\n  error?: string;\n}\n\nexport async function createWorktree(\n  config: Config,\n  projectPath: string,\n  branchName: string\n): Promise<WorktreeResult> {\n  try {\n    const workspacePath = config.getWorkspacePath(projectPath, branchName);\n\n    // Create workspace directory if it doesn't exist\n    if (!fs.existsSync(path.dirname(workspacePath))) {\n      fs.mkdirSync(path.dirname(workspacePath), { recursive: true });\n    }\n\n    // Check if workspace already exists\n    if (fs.existsSync(workspacePath)) {\n      return {\n        success: false,\n        error: `Workspace already exists at ${workspacePath}`,\n      };\n    }\n\n    // Check if branch exists\n    const { stdout: branches } = await execAsync(`git -C \"${projectPath}\" branch -a`);\n    const branchExists = branches\n      .split(\"\\n\")\n      .some(\n        (b) =>\n          b.trim() === branchName ||\n          b.trim() === `* ${branchName}` ||\n          b.trim() === `remotes/origin/${branchName}`\n      );\n\n    if (branchExists) {\n      // Branch exists, create worktree with existing branch\n      await execAsync(`git -C \"${projectPath}\" worktree add \"${workspacePath}\" \"${branchName}\"`);\n    } else {\n      // Branch doesn't exist, create new branch with worktree\n      await execAsync(`git -C \"${projectPath}\" worktree add -b \"${branchName}\" \"${workspacePath}\"`);\n    }\n\n    return { success: true, path: workspacePath };\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    return { success: false, error: message };\n  }\n}\n\nexport async function removeWorktree(\n  workspacePath: string,\n  options: { force: boolean } = { force: false }\n): Promise<WorktreeResult> {\n  try {\n    // Remove the worktree\n    await execAsync(`git worktree remove \"${workspacePath}\" ${options.force ? \"--force\" : \"\"}`);\n    return { success: true };\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    return { success: false, error: message };\n  }\n}\n\nexport async function pruneWorktrees(projectPath: string): Promise<WorktreeResult> {\n  try {\n    await execAsync(`git -C \"${projectPath}\" worktree prune`);\n    return { success: true };\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    return { success: false, error: message };\n  }\n}\n\nexport async function moveWorktree(\n  projectPath: string,\n  oldPath: string,\n  newPath: string\n): Promise<WorktreeResult> {\n  try {\n    // Check if new path already exists\n    if (fs.existsSync(newPath)) {\n      return {\n        success: false,\n        error: `Target path already exists: ${newPath}`,\n      };\n    }\n\n    // Create parent directory for new path if needed\n    const parentDir = path.dirname(newPath);\n    if (!fs.existsSync(parentDir)) {\n      fs.mkdirSync(parentDir, { recursive: true });\n    }\n\n    // Move the worktree using git (from the main repository context)\n    await execAsync(`git -C \"${projectPath}\" worktree move \"${oldPath}\" \"${newPath}\"`);\n    return { success: true, path: newPath };\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    return { success: false, error: message };\n  }\n}\n\nexport async function listWorktrees(projectPath: string): Promise<string[]> {\n  try {\n    const { stdout } = await execAsync(`git -C \"${projectPath}\" worktree list --porcelain`);\n    const worktrees: string[] = [];\n    const lines = stdout.split(\"\\n\");\n\n    for (const line of lines) {\n      if (line.startsWith(\"worktree \")) {\n        const path = line.substring(9);\n        if (path !== projectPath) {\n          // Exclude main worktree\n          worktrees.push(path);\n        }\n      }\n    }\n\n    return worktrees;\n  } catch (error) {\n    console.error(\"Error listing worktrees:\", error);\n    return [];\n  }\n}\n\nexport async function isGitRepository(projectPath: string): Promise<boolean> {\n  try {\n    await execAsync(`git -C \"${projectPath}\" rev-parse --git-dir`);\n    return true;\n  } catch {\n    return false;\n  }\n}\n"]}