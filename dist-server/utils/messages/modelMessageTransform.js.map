{"version":3,"file":"modelMessageTransform.js","sourceRoot":"","sources":["../../../src/utils/messages/modelMessageTransform.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Transform ModelMessages to ensure Anthropic API compliance.\n * This operates on already-converted ModelMessages from Vercel AI SDK.\n */\n\nimport type { ModelMessage, AssistantModelMessage, ToolModelMessage } from \"ai\";\nimport type { CmuxMessage } from \"@/types/message\";\n\n/**\n * Filter out assistant messages that only contain reasoning parts (no text or tool parts).\n * These messages are invalid for the API and provide no value to the model.\n * This happens when a message is interrupted during thinking before producing any text.\n *\n * Note: This function filters out reasoning-only messages but does NOT strip reasoning\n * parts from messages that have other content. Reasoning parts are handled differently\n * per provider (see stripReasoningForOpenAI).\n */\nexport function filterEmptyAssistantMessages(messages: CmuxMessage[]): CmuxMessage[] {\n  return messages.filter((msg) => {\n    // Keep all non-assistant messages\n    if (msg.role !== \"assistant\") {\n      return true;\n    }\n\n    // Keep assistant messages that have at least one text or tool part\n    const hasContent = msg.parts.some(\n      (part) => (part.type === \"text\" && part.text) || part.type === \"dynamic-tool\"\n    );\n\n    return hasContent;\n  });\n}\n\n/**\n * Strip reasoning parts from messages for OpenAI.\n *\n * OpenAI's Responses API uses encrypted reasoning items (with IDs like rs_*) that are\n * managed automatically via previous_response_id. When reasoning parts from history\n * (which are Anthropic-style text-based reasoning) are sent to OpenAI, they create\n * orphaned reasoning items that cause \"reasoning without following item\" errors.\n *\n * Anthropic's reasoning (text-based) is different and SHOULD be sent back via sendReasoning.\n *\n * @param messages - Messages that may contain reasoning parts\n * @returns Messages with reasoning parts stripped (for OpenAI only)\n */\nexport function stripReasoningForOpenAI(messages: CmuxMessage[]): CmuxMessage[] {\n  return messages.map((msg) => {\n    // Only process assistant messages\n    if (msg.role !== \"assistant\") {\n      return msg;\n    }\n\n    // Strip reasoning parts - OpenAI manages reasoning via previousResponseId\n    const filteredParts = msg.parts.filter((part) => part.type !== \"reasoning\");\n\n    return {\n      ...msg,\n      parts: filteredParts,\n    };\n  });\n}\n\n/**\n * Add [INTERRUPTED] sentinel to partial messages by inserting a user message.\n * This helps the model understand that a message was interrupted and incomplete.\n * The sentinel is ONLY for model context, not shown in UI.\n *\n * We insert a separate user message instead of modifying the assistant message\n * because if the assistant message only has reasoning (no text), it will be\n * filtered out, and we'd lose the interruption context. A user message always\n * survives filtering.\n */\nexport function addInterruptedSentinel(messages: CmuxMessage[]): CmuxMessage[] {\n  const result: CmuxMessage[] = [];\n\n  for (const msg of messages) {\n    result.push(msg);\n\n    // If this is a partial assistant message, insert [INTERRUPTED] user message after it\n    if (msg.role === \"assistant\" && msg.metadata?.partial) {\n      result.push({\n        id: `interrupted-${msg.id}`,\n        role: \"user\",\n        parts: [{ type: \"text\", text: \"[INTERRUPTED]\" }],\n        metadata: {\n          timestamp: msg.metadata.timestamp,\n          // Mark as synthetic so it can be identified if needed\n          synthetic: true,\n        },\n      });\n    }\n  }\n\n  return result;\n}\n\n/**\n * Split assistant messages with mixed text and tool calls into separate messages\n * to comply with Anthropic's requirement that tool_use blocks must be immediately\n * followed by their tool_result blocks without intervening text.\n */\nfunction splitMixedContentMessages(messages: ModelMessage[]): ModelMessage[] {\n  const result: ModelMessage[] = [];\n\n  for (let i = 0; i < messages.length; i++) {\n    const msg = messages[i];\n\n    // Only process assistant messages\n    if (msg.role !== \"assistant\") {\n      result.push(msg);\n      continue;\n    }\n\n    const assistantMsg = msg;\n\n    // AssistantContent can be string or array, handle both cases\n    if (typeof assistantMsg.content === \"string\") {\n      // If content is just a string, no tool calls to worry about\n      result.push(msg);\n      continue;\n    }\n\n    // Check if this assistant message has both text and tool calls\n    const textParts = assistantMsg.content.filter((c) => c.type === \"text\" && c.text.trim());\n    const toolCallParts = assistantMsg.content.filter((c) => c.type === \"tool-call\");\n\n    // Check if the next message is a tool result message\n    const nextMsg = messages[i + 1];\n    const hasToolResults = nextMsg?.role === \"tool\";\n\n    // If no tool calls, keep as-is\n    if (toolCallParts.length === 0) {\n      result.push(msg);\n      continue;\n    }\n\n    // If we have tool calls but no text\n    if (textParts.length === 0) {\n      if (hasToolResults) {\n        // Filter tool calls to only include those with results\n        const toolMsg = nextMsg;\n        const resultIds = new Set(\n          toolMsg.content\n            .filter((r) => r.type === \"tool-result\")\n            .map((r) => (r.type === \"tool-result\" ? r.toolCallId : \"\"))\n        );\n\n        const validToolCalls = toolCallParts.filter(\n          (p) => p.type === \"tool-call\" && resultIds.has(p.toolCallId)\n        );\n\n        if (validToolCalls.length > 0) {\n          // Only include tool calls that have results\n          result.push({\n            role: \"assistant\",\n            content: validToolCalls,\n          });\n        }\n        // Skip if no valid tool calls remain\n      }\n      // Skip orphaned tool calls - they violate API requirements\n      continue;\n    }\n\n    // If we have tool calls that will be followed by results,\n    // we need to ensure no text appears between them\n    if (hasToolResults) {\n      const toolMsg = nextMsg;\n\n      // Find positions of text and tool calls in content array\n      const contentWithPositions = assistantMsg.content.map((c, idx) => ({\n        content: c,\n        index: idx,\n      }));\n\n      // Group consecutive parts by type\n      type ContentArray = Exclude<typeof assistantMsg.content, string>;\n      const groups: Array<{ type: \"text\" | \"tool-call\"; parts: ContentArray }> = [];\n      let currentGroup: { type: \"text\" | \"tool-call\"; parts: ContentArray } | null = null;\n\n      for (const item of contentWithPositions) {\n        const partType = item.content.type === \"text\" ? \"text\" : \"tool-call\";\n\n        if (!currentGroup || currentGroup.type !== partType) {\n          if (currentGroup) groups.push(currentGroup);\n          currentGroup = { type: partType, parts: [] };\n        }\n\n        currentGroup.parts.push(item.content);\n      }\n\n      if (currentGroup) groups.push(currentGroup);\n\n      // If we have alternating text and tool calls, we need to split them\n      if (groups.length > 1) {\n        // Process each group\n        for (const group of groups) {\n          if (group.parts.length > 0) {\n            let partsToInclude = group.parts;\n\n            // If this is a tool-call group, filter to only include tool calls that have results\n            if (group.type === \"tool-call\" && hasToolResults) {\n              // Get the IDs of tool calls that have results\n              const resultIds = new Set(\n                toolMsg.content\n                  .filter((r) => r.type === \"tool-result\")\n                  .map((r) => (r.type === \"tool-result\" ? r.toolCallId : \"\"))\n              );\n\n              // Only include tool calls that have corresponding results\n              partsToInclude = group.parts.filter(\n                (p) => p.type === \"tool-call\" && resultIds.has(p.toolCallId)\n              );\n            }\n\n            // Only create assistant message if there are parts to include\n            if (partsToInclude.length > 0) {\n              const newAssistantMsg: AssistantModelMessage = {\n                role: \"assistant\",\n                content: partsToInclude,\n              };\n              result.push(newAssistantMsg);\n\n              // If this group has tool calls that need results,\n              // add the tool results right after\n              if (group.type === \"tool-call\" && hasToolResults) {\n                // Get the tool call IDs from filtered parts\n                const toolCallIds = new Set(\n                  partsToInclude\n                    .filter((p) => p.type === \"tool-call\")\n                    .map((p) => (p.type === \"tool-call\" ? p.toolCallId : \"\"))\n                    .filter(Boolean)\n                );\n\n                // Filter the tool results to only include those for these tool calls\n                const relevantResults = toolMsg.content.filter(\n                  (r) => r.type === \"tool-result\" && toolCallIds.has(r.toolCallId)\n                );\n\n                if (relevantResults.length > 0) {\n                  const newToolMsg: ToolModelMessage = {\n                    role: \"tool\",\n                    content: relevantResults,\n                  };\n                  result.push(newToolMsg);\n                }\n              }\n            }\n          }\n        }\n\n        // Skip the original tool result message since we've redistributed its contents\n        if (hasToolResults) {\n          i++; // Skip next message\n        }\n      } else {\n        // No splitting needed, keep as-is\n        result.push(msg);\n      }\n    } else {\n      // No tool results follow, which means these tool calls were interrupted\n      // Both Anthropic and OpenAI APIs require EVERY tool_use to have a tool_result,\n      // so we must strip out interrupted tool calls entirely. The text content with\n      // [INTERRUPTED] sentinel gives the model enough context.\n\n      // Only include text parts (strip out interrupted tool calls)\n      if (textParts.length > 0) {\n        const textMsg: AssistantModelMessage = {\n          role: \"assistant\",\n          content: textParts,\n        };\n        result.push(textMsg);\n      }\n\n      // DO NOT include tool calls without results - they violate API requirements\n      // The interrupted tool calls are preserved in chat.jsonl for UI display, but\n      // excluded from API calls since they have no results\n    }\n  }\n\n  return result;\n}\n\n/**\n * Filter out assistant messages that only contain reasoning parts (no text or tool parts).\n * Anthropic API rejects messages that have reasoning but no actual content.\n * This happens when a message is interrupted during thinking before producing any text.\n */\nfunction filterReasoningOnlyMessages(messages: ModelMessage[]): ModelMessage[] {\n  return messages.filter((msg) => {\n    if (msg.role !== \"assistant\") {\n      return true;\n    }\n\n    // Check if content is string or array\n    if (typeof msg.content === \"string\") {\n      return msg.content.trim().length > 0;\n    }\n\n    // For array content, check if there's at least one non-reasoning part\n    const hasNonReasoningContent = msg.content.some((part) => part.type !== \"reasoning\");\n\n    return hasNonReasoningContent;\n  });\n}\n\n/**\n * Strip reasoning parts from assistant messages.\n * OpenAI's Responses API has its own reasoning format (encrypted reasoning items with IDs).\n * Anthropic's text-based reasoning parts are incompatible and must be removed.\n * This function removes reasoning parts while preserving text and tool-call parts.\n */\nfunction stripReasoningParts(messages: ModelMessage[]): ModelMessage[] {\n  return messages.map((msg) => {\n    // Only process assistant messages with array content\n    if (msg.role !== \"assistant\") {\n      return msg;\n    }\n\n    const assistantMsg = msg;\n\n    // Skip string content (no reasoning parts to strip)\n    if (typeof assistantMsg.content === \"string\") {\n      return msg;\n    }\n\n    // Filter out reasoning parts, keep everything else\n    const filteredContent = assistantMsg.content.filter((part) => part.type !== \"reasoning\");\n\n    // If all content was filtered out, this message will be caught by filterReasoningOnlyMessages\n    return {\n      ...assistantMsg,\n      content: filteredContent,\n    };\n  });\n}\n\n/**\n * Coalesce consecutive parts of the same type within each message.\n * Streaming creates many individual text/reasoning parts; merge them for easier debugging.\n * Also reduces JSON overhead when sending messages to the API.\n * Tool calls remain atomic (not merged).\n */\nfunction coalesceConsecutiveParts(messages: ModelMessage[]): ModelMessage[] {\n  return messages.map((msg) => {\n    // Only process assistant messages with array content\n    if (msg.role !== \"assistant\") {\n      return msg;\n    }\n\n    const assistantMsg = msg;\n\n    // Skip string content\n    if (typeof assistantMsg.content === \"string\") {\n      return msg;\n    }\n\n    // Now TypeScript knows content is an array\n    type ContentArray = Exclude<typeof assistantMsg.content, string>;\n    const coalesced: ContentArray = [];\n\n    for (const part of assistantMsg.content) {\n      const lastPart = coalesced[coalesced.length - 1];\n\n      // Merge consecutive text parts\n      if (part.type === \"text\" && lastPart?.type === \"text\") {\n        lastPart.text += part.text;\n        continue;\n      }\n\n      // Merge consecutive reasoning parts (extended thinking)\n      if (part.type === \"reasoning\" && lastPart?.type === \"reasoning\") {\n        lastPart.text += part.text;\n        continue;\n      }\n\n      // Keep tool calls and first occurrence of each type\n      coalesced.push(part);\n    }\n\n    return {\n      ...assistantMsg,\n      content: coalesced,\n    };\n  });\n}\n\n/**\n * Merge consecutive user messages with newline separators.\n * When filtering removes assistant messages, we can end up with consecutive user messages.\n * Anthropic requires alternating user/assistant, so we merge them.\n */\nfunction mergeConsecutiveUserMessages(messages: ModelMessage[]): ModelMessage[] {\n  const merged: ModelMessage[] = [];\n\n  for (const msg of messages) {\n    if (msg.role === \"user\" && merged.length > 0 && merged[merged.length - 1].role === \"user\") {\n      // Consecutive user message - merge with previous\n      const prevMsg = merged[merged.length - 1];\n\n      // Get text content from both messages\n      const prevText = Array.isArray(prevMsg.content)\n        ? (prevMsg.content.find((c) => c.type === \"text\")?.text ?? \"\")\n        : prevMsg.content;\n\n      const currentText = Array.isArray(msg.content)\n        ? (msg.content.find((c) => c.type === \"text\")?.text ?? \"\")\n        : typeof msg.content === \"string\"\n          ? msg.content\n          : \"\";\n\n      // Merge with newline prefix\n      const mergedText = prevText + \"\\n\" + currentText;\n\n      // Update the previous message\n      merged[merged.length - 1] = {\n        role: \"user\",\n        content: [{ type: \"text\", text: mergedText }],\n      };\n    } else {\n      // Not consecutive user message, add as-is\n      merged.push(msg);\n    }\n  }\n\n  return merged;\n}\n\n/**\n * Transform messages to ensure provider API compliance.\n * Applies multiple transformation passes based on provider requirements:\n * 0. Coalesce consecutive parts (text/reasoning) - all providers, reduces JSON overhead\n * 1. Split mixed content messages (text + tool calls) - all providers\n * 2. Strip/filter reasoning parts:\n *    - OpenAI: Strip all Anthropic reasoning parts (incompatible format)\n *    - Anthropic: Filter out reasoning-only messages (API rejects them)\n * 3. Merge consecutive user messages - all providers\n *\n * Note: encryptedContent stripping happens earlier in streamManager when tool results\n * are first stored, not during message transformation.\n *\n * @param messages The messages to transform\n * @param provider The provider name (e.g., \"anthropic\", \"openai\")\n */\nexport function transformModelMessages(messages: ModelMessage[], provider: string): ModelMessage[] {\n  // Pass 0: Coalesce consecutive parts to reduce JSON overhead from streaming (applies to all providers)\n  const coalesced = coalesceConsecutiveParts(messages);\n\n  // Pass 1: Split mixed content messages (applies to all providers)\n  const split = splitMixedContentMessages(coalesced);\n\n  // Pass 2: Provider-specific reasoning handling\n  let reasoningHandled: ModelMessage[];\n  if (provider === \"openai\") {\n    // OpenAI: Strip all reasoning parts (Anthropic's text-based reasoning is incompatible with OpenAI's format)\n    reasoningHandled = stripReasoningParts(split);\n    // Then filter out any messages that became empty after stripping\n    reasoningHandled = filterReasoningOnlyMessages(reasoningHandled);\n  } else if (provider === \"anthropic\") {\n    // Anthropic: Filter out reasoning-only messages (API rejects messages with only reasoning)\n    reasoningHandled = filterReasoningOnlyMessages(split);\n  } else {\n    // Unknown provider: no reasoning handling\n    reasoningHandled = split;\n  }\n\n  // Pass 3: Merge consecutive user messages (applies to all providers)\n  const merged = mergeConsecutiveUserMessages(reasoningHandled);\n\n  return merged;\n}\n\n/**\n * Validate that the transformed messages follow Anthropic's requirements:\n * - Every tool-call must be immediately followed by its tool-result\n * - No text can appear between tool-call and tool-result\n */\nexport function validateAnthropicCompliance(messages: ModelMessage[]): {\n  valid: boolean;\n  error?: string;\n} {\n  const pendingToolCalls = new Map<string, number>(); // toolCallId -> message index\n\n  for (let i = 0; i < messages.length; i++) {\n    const msg = messages[i];\n\n    if (msg.role === \"assistant\") {\n      const assistantMsg = msg;\n\n      // Skip if content is just a string\n      if (typeof assistantMsg.content === \"string\") {\n        continue;\n      }\n\n      // Track any tool calls in this message\n      for (const content of assistantMsg.content) {\n        if (content.type === \"tool-call\") {\n          pendingToolCalls.set(content.toolCallId, i);\n        }\n      }\n\n      // If we have pending tool calls and encounter text or more tool calls,\n      // check if the next message has the results\n      if (pendingToolCalls.size > 0) {\n        const nextMsg = messages[i + 1];\n\n        // The next message MUST be a tool result message if we have pending calls\n        if (!nextMsg || nextMsg.role !== \"tool\") {\n          const pendingIds = Array.from(pendingToolCalls.keys()).join(\", \");\n          return {\n            valid: false,\n            error: `Message ${i}: tool_use blocks found without tool_result blocks immediately after: ${pendingIds}`,\n          };\n        }\n      }\n    } else if (msg.role === \"tool\") {\n      const toolMsg = msg;\n\n      // Process tool results and clear pending calls\n      for (const content of toolMsg.content) {\n        if (content.type === \"tool-result\") {\n          const toolCallId = content.toolCallId;\n\n          // Check if this result corresponds to a pending call\n          if (!pendingToolCalls.has(toolCallId)) {\n            return {\n              valid: false,\n              error: `Message ${i}: tool_result for ${toolCallId} has no corresponding tool_use`,\n            };\n          }\n\n          // Check if the tool call was in the immediately previous assistant message\n          const callIndex = pendingToolCalls.get(toolCallId);\n          if (callIndex !== i - 1) {\n            return {\n              valid: false,\n              error: `Message ${i}: tool_result for ${toolCallId} is not immediately after its tool_use (was in message ${callIndex})`,\n            };\n          }\n\n          pendingToolCalls.delete(toolCallId);\n        }\n      }\n    }\n  }\n\n  // Check for any remaining pending tool calls\n  if (pendingToolCalls.size > 0) {\n    const pendingIds = Array.from(pendingToolCalls.keys()).join(\", \");\n    return {\n      valid: false,\n      error: `Unresolved tool_use blocks without corresponding tool_result: ${pendingIds}`,\n    };\n  }\n\n  return { valid: true };\n}\n"]}