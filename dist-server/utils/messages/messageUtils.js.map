{"version":3,"file":"messageUtils.js","sourceRoot":"","sources":["../../../src/utils/messages/messageUtils.ts"],"names":[],"mappings":";;AAKA,gDAKC;AASD,oEAUC;AAKD,0CASC;AAKD,gDAEC;AAhDD;;GAEG;AACH,SAAgB,kBAAkB,CAAC,OAAoB;IACrD,OAAO,OAAO,CAAC,KAAK;SACjB,MAAM,CAAC,CAAC,CAAC,EAAqB,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC;SACnD,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC;SACxB,IAAI,CAAC,EAAE,CAAC,CAAC;AACd,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,4BAA4B,CAAC,GAAqB;IAChE,IAAI,GAAG,CAAC,IAAI,KAAK,MAAM,IAAI,GAAG,CAAC,IAAI,KAAK,cAAc,IAAI,GAAG,CAAC,IAAI,KAAK,gBAAgB;QACrF,OAAO,KAAK,CAAC;IAEf,oDAAoD;IACpD,IAAI,CAAC,GAAG,CAAC,mBAAmB;QAAE,OAAO,KAAK,CAAC;IAE3C,yFAAyF;IACzF,MAAM,WAAW,GAAG,aAAa,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC;IACnE,OAAO,GAAG,CAAC,SAAS,IAAI,CAAC,WAAW,CAAC;AACvC,CAAC;AAED;;GAEG;AACH,SAAgB,eAAe,CAAC,IAAa;IAC3C,OAAO,CACL,OAAO,IAAI,KAAK,QAAQ;QACxB,IAAI,KAAK,IAAI;QACb,MAAM,IAAI,IAAI;QACd,IAAI,CAAC,IAAI,KAAK,MAAM;QACpB,OAAO,IAAI,IAAI;QACf,IAAI,CAAC,KAAK,KAAK,WAAW,CAC3B,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAgB,kBAAkB,CAAC,OAAoB;IACrD,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC7C,CAAC","sourcesContent":["import type { CmuxMessage, CmuxTextPart, DisplayedMessage } from \"@/types/message\";\n\n/**\n * Extracts text content from message parts\n */\nexport function extractTextContent(message: CmuxMessage): string {\n  return message.parts\n    .filter((p): p is CmuxTextPart => p.type === \"text\")\n    .map((p) => p.text || \"\")\n    .join(\"\");\n}\n\n/**\n * Determines if the interrupted barrier should be shown for a DisplayedMessage.\n *\n * The barrier should show when:\n * - Message was interrupted (isPartial) AND not currently streaming\n * - For multi-part messages, only show on the last part\n */\nexport function shouldShowInterruptedBarrier(msg: DisplayedMessage): boolean {\n  if (msg.type === \"user\" || msg.type === \"stream-error\" || msg.type === \"history-hidden\")\n    return false;\n\n  // Only show on the last part of multi-part messages\n  if (!msg.isLastPartOfMessage) return false;\n\n  // Show if interrupted and not actively streaming (tools don't have isStreaming property)\n  const isStreaming = \"isStreaming\" in msg ? msg.isStreaming : false;\n  return msg.isPartial && !isStreaming;\n}\n\n/**\n * Type guard to check if a message part has a streaming state\n */\nexport function isStreamingPart(part: unknown): part is { type: \"text\"; state: \"streaming\" } {\n  return (\n    typeof part === \"object\" &&\n    part !== null &&\n    \"type\" in part &&\n    part.type === \"text\" &&\n    \"state\" in part &&\n    part.state === \"streaming\"\n  );\n}\n\n/**\n * Checks if a message is currently streaming\n */\nexport function isStreamingMessage(message: CmuxMessage): boolean {\n  return message.parts.some(isStreamingPart);\n}\n"]}