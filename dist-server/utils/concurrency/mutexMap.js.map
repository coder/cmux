{"version":3,"file":"mutexMap.js","sourceRoot":"","sources":["../../../src/utils/concurrency/mutexMap.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;GAeG;AACH,MAAa,QAAQ;IACX,KAAK,GAAG,IAAI,GAAG,EAAoB,CAAC;IAE5C;;;;OAIG;IACH,KAAK,CAAC,QAAQ,CAAI,GAAM,EAAE,SAA2B;QACnD,0DAA0D;QAC1D,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,YAAY,EAAE,CAAC;YACjB,MAAM,YAAY,CAAC;QACrB,CAAC;QAED,uCAAuC;QACvC,IAAI,WAAuB,CAAC;QAC5B,MAAM,WAAW,GAAG,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;YAChD,WAAW,GAAG,OAAO,CAAC;QACxB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QAEjC,IAAI,CAAC;YACH,wBAAwB;YACxB,OAAO,MAAM,SAAS,EAAE,CAAC;QAC3B,CAAC;gBAAS,CAAC;YACT,mBAAmB;YACnB,WAAY,EAAE,CAAC;YACf,uCAAuC;YACvC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,WAAW,EAAE,CAAC;gBACxC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACzB,CAAC;QACH,CAAC;IACH,CAAC;CACF;AAlCD,4BAkCC","sourcesContent":["/**\n * MutexMap - Generic mutex utility for serializing operations per key\n *\n * Prevents race conditions when multiple concurrent operations need to\n * modify the same resource (file, data structure, etc.) identified by a key.\n *\n * Example usage:\n * ```typescript\n * const fileLocks = new MutexMap<string>();\n *\n * // Serialize writes to the same file\n * await fileLocks.withLock(\"file.txt\", async () => {\n *   await fs.writeFile(\"file.txt\", data);\n * });\n * ```\n */\nexport class MutexMap<K> {\n  private locks = new Map<K, Promise<void>>();\n\n  /**\n   * Execute an operation with exclusive access per key\n   * Operations for the same key are serialized (run one at a time)\n   * Operations for different keys can run concurrently\n   */\n  async withLock<T>(key: K, operation: () => Promise<T>): Promise<T> {\n    // Wait for any existing operation on this key to complete\n    const existingLock = this.locks.get(key);\n    if (existingLock) {\n      await existingLock;\n    }\n\n    // Create a new lock for this operation\n    let releaseLock: () => void;\n    const lockPromise = new Promise<void>((resolve) => {\n      releaseLock = resolve;\n    });\n    this.locks.set(key, lockPromise);\n\n    try {\n      // Execute the operation\n      return await operation();\n    } finally {\n      // Release the lock\n      releaseLock!();\n      // Clean up if this is the current lock\n      if (this.locks.get(key) === lockPromise) {\n        this.locks.delete(key);\n      }\n    }\n  }\n}\n"]}