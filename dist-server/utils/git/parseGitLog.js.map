{"version":3,"file":"parseGitLog.js","sourceRoot":"","sources":["../../../src/utils/git/parseGitLog.ts"],"names":[],"mappings":";;AAmDA,gDAgEC;AAnFD;;;;;;;;;;;;;;;;;;GAkBG;AACH,SAAgB,kBAAkB,CAChC,MAAc,EACd,OAA4B;IAE5B,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC;QACpB,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;IACtC,CAAC;IAED,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACxC,MAAM,OAAO,GAAsB,EAAE,CAAC;IACtC,MAAM,OAAO,GAAgB,EAAE,CAAC;IAChC,IAAI,eAAe,GAAG,KAAK,CAAC;IAE5B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,iDAAiD;QACjD,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,KAAK,EAAE,CAAC;YAClD,eAAe,GAAG,IAAI,CAAC;YACvB,SAAS;QACX,CAAC;QAED,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,wDAAwD;YACxD,kFAAkF;YAClF,MAAM,WAAW,GAAG,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3D,IAAI,WAAW,EAAE,CAAC;gBAChB,MAAM,CAAC,EAAE,aAAa,EAAE,UAAU,CAAC,GAAG,WAAW,CAAC;gBAClD,MAAM,WAAW,GAAG,aAAa,CAAC,MAAM,CAAC;gBACzC,OAAO,CAAC,IAAI,CAAC;oBACX,MAAM,EAAE,UAAU;oBAClB,WAAW;iBACZ,CAAC,CAAC;YACL,CAAC;YACD,SAAS;QACX,CAAC;QAED,yCAAyC;QACzC,0FAA0F;QAC1F,gEAAgE;QAChE,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC;QACnC,IAAI,IAAI,CAAC,MAAM,GAAG,WAAW,EAAE,CAAC;YAC9B,SAAS,CAAC,oCAAoC;QAChD,CAAC;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;QAClD,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC;QAEhD,iCAAiC;QACjC,MAAM,KAAK,GAAG,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEpD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,SAAS,CAAC,8BAA8B;QAC1C,CAAC;QAED,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,KAAK,CAAC;QAEhC,OAAO,CAAC,IAAI,CAAC;YACX,UAAU;YACV,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;YACjB,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE;YACpC,OAAO,EAAE,OAAO,CAAC,IAAI,EAAE;SACxB,CAAC,CAAC;IACL,CAAC;IAED,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;AAC9B,CAAC","sourcesContent":["/**\n * Represents a branch header from git show-branch\n */\nexport interface GitBranchHeader {\n  /** Branch name (e.g., \"HEAD\", \"origin/main\") */\n  branch: string;\n  /** Column index (0-based) */\n  columnIndex: number;\n}\n\n/**\n * Represents a single commit in the git log\n */\nexport interface GitCommit {\n  /** Branch indicators from git show-branch (e.g., \"+ +\", \"+++\", \"- -\") */\n  indicators: string;\n  /** Short commit hash */\n  hash: string;\n  /** Formatted date string */\n  date: string;\n  /** Commit subject/message */\n  subject: string;\n}\n\n/**\n * Result of parsing git show-branch output\n */\nexport interface GitShowBranchResult {\n  headers: GitBranchHeader[];\n  commits: GitCommit[];\n}\n\n/**\n * Parses git show-branch output.\n * Expected format:\n *   Header section:\n *     [!*] [branch-name] commit-subject\n *     ...\n *   ---\n *   Commit section:\n *     <indicators> [<hash>] <subject>\n *     ...\n *\n * Example:\n *   ! [HEAD] Latest commit on HEAD\n *    ! [origin/main] Latest commit on origin/main\n *   ---\n *   + + [042118f] Clear providerMetadata from tool messages too\n *\n * Note: Dates are fetched separately and merged in via hash lookup.\n */\nexport function parseGitShowBranch(\n  output: string,\n  dateMap: Map<string, string>\n): GitShowBranchResult {\n  if (!output?.trim()) {\n    return { headers: [], commits: [] };\n  }\n\n  const lines = output.trim().split(\"\\n\");\n  const headers: GitBranchHeader[] = [];\n  const commits: GitCommit[] = [];\n  let inCommitSection = false;\n\n  for (const line of lines) {\n    // Skip until we find the separator \"--\" or \"---\"\n    if (line.trim() === \"--\" || line.trim() === \"---\") {\n      inCommitSection = true;\n      continue;\n    }\n\n    if (!inCommitSection) {\n      // Parse header lines: [!*] [branch-name] commit-subject\n      // The column index is determined by the position of the first non-space character\n      const headerMatch = /^(\\s*)[!*]\\s+\\[([^\\]]+)\\]/.exec(line);\n      if (headerMatch) {\n        const [, leadingSpaces, branchName] = headerMatch;\n        const columnIndex = leadingSpaces.length;\n        headers.push({\n          branch: branchName,\n          columnIndex,\n        });\n      }\n      continue;\n    }\n\n    // Match: <indicators> [<hash>] <subject>\n    // Indicators are exactly N characters (one per branch), followed by space(s), then [hash]\n    // Extract exactly N characters to preserve position information\n    const numBranches = headers.length;\n    if (line.length < numBranches) {\n      continue; // Line too short to have indicators\n    }\n\n    const indicators = line.substring(0, numBranches);\n    const rest = line.substring(numBranches).trim();\n\n    // Parse the rest: [hash] subject\n    const match = /^\\[([a-f0-9]+)\\]\\s+(.+)$/.exec(rest);\n\n    if (!match) {\n      continue; // Skip lines that don't match\n    }\n\n    const [, hash, subject] = match;\n\n    commits.push({\n      indicators,\n      hash: hash.trim(),\n      date: dateMap.get(hash.trim()) ?? \"\",\n      subject: subject.trim(),\n    });\n  }\n\n  return { headers, commits };\n}\n"]}