{"version":3,"file":"parseGitStatus.js","sourceRoot":"","sources":["../../../src/utils/git/parseGitStatus.ts"],"names":[],"mappings":";;AAUA,0CAuBC;AAuBD,kEAkDC;AAxGD;;;;;;;GAOG;AACH,SAAgB,eAAe,CAAC,MAAc;IAC5C,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;IAE9B,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,IAAI,CAAC;IACd,CAAC;IAED,oDAAoD;IACpD,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAEnC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACvB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACrC,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEtC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,yDAAyD;IACzD,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;AACzC,CAAC;AAED;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,SAAgB,2BAA2B,CAAC,MAAc;IACxD,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;IAE9B,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAClC,IAAI,eAAe,GAAG,KAAK,CAAC;IAC5B,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,MAAM,GAAG,CAAC,CAAC;IAEf,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,iDAAiD;QACjD,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,KAAK,EAAE,CAAC;YAClD,eAAe,GAAG,IAAI,CAAC;YACvB,SAAS;QACX,CAAC;QAED,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,SAAS,CAAC,oBAAoB;QAChC,CAAC;QAED,sDAAsD;QACtD,2EAA2E;QAC3E,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACpB,SAAS;QACX,CAAC;QAED,8CAA8C;QAC9C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAChC,SAAS;QACX,CAAC;QAED,2EAA2E;QAC3E,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAEhC,6CAA6C;QAC7C,IAAI,aAAa,KAAK,GAAG,IAAI,eAAe,KAAK,GAAG,EAAE,CAAC;YACrD,KAAK,EAAE,CAAC;QACV,CAAC;QACD,8CAA8C;aACzC,IAAI,aAAa,KAAK,GAAG,IAAI,eAAe,KAAK,GAAG,EAAE,CAAC;YAC1D,MAAM,EAAE,CAAC;QACX,CAAC;IACH,CAAC;IAED,yDAAyD;IACzD,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;AACzC,CAAC","sourcesContent":["import type { GitStatus } from \"@/types/workspace\";\n\n/**\n * Parse the output of `git rev-list --left-right --count HEAD...origin/branch`\n *\n * Expected format: \"N\\tM\" where N is ahead count and M is behind count\n *\n * @param output - The raw output from git rev-list command\n * @returns GitStatus object with ahead/behind counts, or null if parsing fails\n */\nexport function parseGitRevList(output: string): GitStatus | null {\n  const trimmed = output.trim();\n\n  if (!trimmed) {\n    return null;\n  }\n\n  // Split by tab - expected format is \"ahead\\tbehind\"\n  const parts = trimmed.split(/\\s+/);\n\n  if (parts.length !== 2) {\n    return null;\n  }\n\n  const ahead = parseInt(parts[0], 10);\n  const behind = parseInt(parts[1], 10);\n\n  if (isNaN(ahead) || isNaN(behind)) {\n    return null;\n  }\n\n  // Note: dirty status is checked separately in the caller\n  return { ahead, behind, dirty: false };\n}\n\n/**\n * Parse the output of `git show-branch --sha1-name HEAD origin/branch` to calculate ahead/behind counts.\n *\n * This counts commits shown in the show-branch divergence section, which provides a more\n * meaningful representation of branch divergence than git rev-list.\n *\n * Expected format:\n *   ! [HEAD] commit message\n *    ! [origin/branch] commit message\n *   --\n *   -  [hash] commit in HEAD but not origin\n *   ++ [hash] commit in both\n *    + [hash] commit in origin but not HEAD\n *\n * Indicators:\n * - Column 0 (HEAD): non-space means commit is in HEAD, space means not in HEAD\n * - Column 1 (origin/branch): non-space means commit is in origin/branch, space means not in origin\n *\n * @param output - The raw output from git show-branch command\n * @returns GitStatus object with ahead/behind counts, or null if parsing fails\n */\nexport function parseGitShowBranchForStatus(output: string): GitStatus | null {\n  const trimmed = output.trim();\n\n  if (!trimmed) {\n    return null;\n  }\n\n  const lines = trimmed.split(\"\\n\");\n  let inCommitSection = false;\n  let ahead = 0;\n  let behind = 0;\n\n  for (const line of lines) {\n    // Skip until we find the separator \"--\" or \"---\"\n    if (line.trim() === \"--\" || line.trim() === \"---\") {\n      inCommitSection = true;\n      continue;\n    }\n\n    if (!inCommitSection) {\n      continue; // Skip header lines\n    }\n\n    // Match commit lines: <indicators> [<hash>] <subject>\n    // We need at least 2 characters for the indicators (column 0 and column 1)\n    if (line.length < 2) {\n      continue;\n    }\n\n    // Check if this line has a hash (commit line)\n    if (!/\\[[a-f0-9]+\\]/.test(line)) {\n      continue;\n    }\n\n    // Extract indicators (first 2 characters represent HEAD and origin/branch)\n    const headIndicator = line[0];\n    const originIndicator = line[1];\n\n    // Check if in HEAD but not in origin (ahead)\n    if (headIndicator !== \" \" && originIndicator === \" \") {\n      ahead++;\n    }\n    // Check if in origin but not in HEAD (behind)\n    else if (headIndicator === \" \" && originIndicator !== \" \") {\n      behind++;\n    }\n  }\n\n  // Note: dirty status is checked separately in the caller\n  return { ahead, behind, dirty: false };\n}\n"]}