{"version":3,"file":"TokenStatsWorker.js","sourceRoot":"","sources":["../../../src/utils/tokens/TokenStatsWorker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Wrapper class for managing the token statistics Web Worker\n * Provides a clean async API for calculating stats off the main thread\n */\n\nimport type { CmuxMessage } from \"@/types/message\";\nimport type { ChatStats } from \"@/types/chatStats\";\nimport type { WorkerRequest, WorkerResponse, WorkerError } from \"./tokenStats.worker\";\n\n/**\n * TokenStatsWorker manages a dedicated Web Worker for calculating token statistics\n * Ensures only one calculation runs at a time and provides Promise-based API\n */\nexport class TokenStatsWorker {\n  private readonly worker: Worker;\n  private requestCounter = 0;\n  private pendingRequest: {\n    id: string;\n    resolve: (stats: ChatStats) => void;\n    reject: (error: Error) => void;\n  } | null = null;\n\n  constructor() {\n    // Create worker using Vite's Web Worker support\n    // The ?worker suffix tells Vite to bundle this as a worker\n    this.worker = new Worker(new URL(\"./tokenStats.worker.ts\", import.meta.url), {\n      type: \"module\",\n    });\n\n    this.worker.onmessage = this.handleMessage.bind(this);\n    this.worker.onerror = this.handleError.bind(this);\n  }\n\n  /**\n   * Calculate token statistics for the given messages\n   * Cancels any pending calculation and starts a new one\n   * @param messages - Array of CmuxMessages to analyze\n   * @param model - Model string for tokenizer selection\n   * @returns Promise that resolves with calculated stats\n   */\n  calculate(messages: CmuxMessage[], model: string): Promise<ChatStats> {\n    // Cancel any pending request (latest request wins)\n    if (this.pendingRequest) {\n      this.pendingRequest.reject(new Error(\"Cancelled by newer request\"));\n      this.pendingRequest = null;\n    }\n\n    // Generate unique request ID\n    const id = `${Date.now()}-${++this.requestCounter}`;\n\n    // Create promise that will resolve when worker responds\n    const promise = new Promise<ChatStats>((resolve, reject) => {\n      this.pendingRequest = { id, resolve, reject };\n    });\n\n    // Send calculation request to worker\n    const request: WorkerRequest = {\n      id,\n      messages,\n      model,\n    };\n    this.worker.postMessage(request);\n\n    return promise;\n  }\n\n  /**\n   * Handle successful or error responses from worker\n   */\n  private handleMessage(e: MessageEvent<WorkerResponse | WorkerError>) {\n    const response = e.data;\n\n    // Ignore responses for cancelled requests\n    if (!this.pendingRequest || this.pendingRequest.id !== response.id) {\n      return;\n    }\n\n    const { resolve, reject } = this.pendingRequest;\n    this.pendingRequest = null;\n\n    if (response.success) {\n      resolve(response.stats);\n    } else {\n      reject(new Error(response.error));\n    }\n  }\n\n  /**\n   * Handle worker errors (script errors, not calculation errors)\n   */\n  private handleError(error: ErrorEvent) {\n    if (this.pendingRequest) {\n      this.pendingRequest.reject(new Error(`Worker error: ${error.message || \"Unknown error\"}`));\n      this.pendingRequest = null;\n    }\n  }\n\n  /**\n   * Terminate the worker and clean up resources\n   */\n  terminate() {\n    if (this.pendingRequest) {\n      this.pendingRequest.reject(new Error(\"Worker terminated\"));\n      this.pendingRequest = null;\n    }\n    this.worker.terminate();\n  }\n}\n"]}