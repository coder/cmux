{"version":3,"file":"keybinds.js","sourceRoot":"","sources":["../../../src/utils/ui/keybinds.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Centralized keybind utilities for consistent keyboard shortcut handling\n * and OS-aware display across the application.\n *\n * NOTE: This file is the source of truth for keybind definitions.\n * When adding/modifying keybinds, also update docs/keybinds.md\n */\n\n/**\n * Keybind definition type\n */\nexport interface Keybind {\n  key: string;\n  ctrl?: boolean;\n  shift?: boolean;\n  alt?: boolean;\n  meta?: boolean;\n}\n\n/**\n * Detect if running on macOS\n */\nexport function isMac(): boolean {\n  try {\n    if (typeof window === \"undefined\") return false;\n    interface MinimalAPI {\n      platform: string;\n    }\n    const api = (window as unknown as { api?: MinimalAPI }).api;\n    return api?.platform === \"darwin\";\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Check if a keyboard event matches a keybind definition.\n * On macOS, ctrl in the definition matches either ctrl OR meta (Cmd) in the event.\n */\nexport function matchesKeybind(\n  event: React.KeyboardEvent | KeyboardEvent,\n  keybind: Keybind\n): boolean {\n  // Check key match (case-insensitive for letters)\n  if (event.key.toLowerCase() !== keybind.key.toLowerCase()) {\n    return false;\n  }\n\n  // On Mac, treat ctrl and meta as equivalent\n  const ctrlOrMeta = isMac() ? event.ctrlKey || event.metaKey : event.ctrlKey;\n\n  // Check modifiers\n  if (keybind.ctrl && !ctrlOrMeta) return false;\n  if (!keybind.ctrl && ctrlOrMeta) return false;\n\n  if (keybind.shift && !event.shiftKey) return false;\n  if (!keybind.shift && event.shiftKey) return false;\n\n  if (keybind.alt && !event.altKey) return false;\n  if (!keybind.alt && event.altKey) return false;\n\n  // meta is explicit (only check when not handled by ctrl equivalence)\n  if (!isMac()) {\n    if (keybind.meta && !event.metaKey) return false;\n    if (!keybind.meta && event.metaKey) return false;\n  }\n\n  return true;\n}\n\n/**\n * Check if the event target is an editable element (input, textarea, contentEditable).\n * Used to prevent global keyboard shortcuts from interfering with text input.\n */\nexport function isEditableElement(target: EventTarget | null): boolean {\n  if (!target || !(target instanceof HTMLElement)) {\n    return false;\n  }\n\n  const tagName = target.tagName.toLowerCase();\n  return tagName === \"input\" || tagName === \"textarea\" || target.contentEditable === \"true\";\n}\n\n/**\n * Format a keybind for display to users.\n * Returns Mac-style symbols on macOS, or Windows-style text elsewhere.\n */\nexport function formatKeybind(keybind: Keybind): string {\n  const parts: string[] = [];\n\n  if (isMac()) {\n    // Mac-style formatting with symbols (using Unicode escapes for safety)\n    // For ctrl on Mac, we actually mean Cmd in most cases since matcher treats them as equivalent\n    if (keybind.ctrl && !keybind.meta) {\n      parts.push(\"\\u2318\"); // ⌘ Command\n    } else if (keybind.ctrl) {\n      parts.push(\"\\u2303\"); // ⌃ Control\n    }\n    if (keybind.alt) parts.push(\"\\u2325\"); // ⌥ Option\n    if (keybind.shift) parts.push(\"\\u21E7\"); // ⇧ Shift\n    if (keybind.meta) parts.push(\"\\u2318\"); // ⌘ Command\n  } else {\n    // Windows/Linux-style formatting with text\n    if (keybind.ctrl) parts.push(\"Ctrl\");\n    if (keybind.alt) parts.push(\"Alt\");\n    if (keybind.shift) parts.push(\"Shift\");\n    if (keybind.meta) parts.push(\"Meta\");\n  }\n\n  // Add the key (capitalize single letters)\n  const key = keybind.key.length === 1 ? keybind.key.toUpperCase() : keybind.key;\n  parts.push(key);\n\n  return isMac() ? parts.join(\"\\u00B7\") : parts.join(\"+\"); // · on Mac, + elsewhere\n}\n\n/**\n * Centralized registry of application keybinds.\n * Single source of truth for all keyboard shortcuts.\n * In general we try to use shortcuts the user would naturally expect.\n * We also like vim keybinds.\n */\nexport const KEYBINDS = {\n  /** Toggle between Plan and Exec modes */\n  TOGGLE_MODE: { key: \"M\", ctrl: true, shift: true },\n\n  /** Send message / Submit form */\n  SEND_MESSAGE: { key: \"Enter\" },\n\n  /** Insert newline in text input */\n  NEW_LINE: { key: \"Enter\", shift: true },\n\n  /** Cancel current action / Close modal (excludes stream interruption) */\n  CANCEL: { key: \"Escape\" },\n\n  /** Interrupt active stream (destructive - stops AI generation) */\n  INTERRUPT_STREAM: { key: \"c\", ctrl: true },\n\n  /** Focus chat input */\n  FOCUS_INPUT_I: { key: \"i\" },\n\n  /** Focus chat input (alternate) */\n  FOCUS_INPUT_A: { key: \"a\" },\n\n  /** Create new workspace for current project */\n  NEW_WORKSPACE: { key: \"n\", ctrl: true },\n\n  /** Jump to bottom of chat */\n  JUMP_TO_BOTTOM: { key: \"G\", shift: true },\n\n  /** Navigate to next workspace in current project */\n  NEXT_WORKSPACE: { key: \"j\", ctrl: true },\n\n  /** Navigate to previous workspace in current project */\n  PREV_WORKSPACE: { key: \"k\", ctrl: true },\n\n  /** Toggle sidebar visibility */\n  // VS Code-style quick toggle\n  // macOS: Cmd+P, Win/Linux: Ctrl+P\n  TOGGLE_SIDEBAR: { key: \"P\", ctrl: true },\n\n  /** Open model selector */\n  OPEN_MODEL_SELECTOR: { key: \"/\", ctrl: true },\n\n  /** Open workspace in terminal */\n  OPEN_TERMINAL: { key: \"t\", ctrl: true },\n\n  /** Open Command Palette */\n  // VS Code-style palette\n  // macOS: Cmd+Shift+P, Win/Linux: Ctrl+Shift+P\n  OPEN_COMMAND_PALETTE: { key: \"P\", ctrl: true, shift: true },\n} as const;\n"]}