{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../src/utils/slashCommands/parser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Command parser for parsing chat commands\n */\n\nimport type { ParsedCommand, SlashCommandDefinition } from \"./types\";\nimport { SLASH_COMMAND_DEFINITION_MAP } from \"./registry\";\n\nexport { SLASH_COMMAND_DEFINITIONS } from \"./registry\";\n\n/**\n * Parse a raw command string into a structured command\n * @param input The raw command string (e.g., \"/providers set anthropic apiKey sk-xxx\")\n * @returns Parsed command or null if not a command\n */\nexport function parseCommand(input: string): ParsedCommand {\n  const trimmed = input.trim();\n  if (!trimmed.startsWith(\"/\")) {\n    return null;\n  }\n\n  // Remove leading slash and split by spaces (respecting quotes)\n  const parts = (trimmed.substring(1).match(/(?:[^\\s\"]+|\"[^\"]*\")+/g) ?? []) as string[];\n  if (parts.length === 0) {\n    return null;\n  }\n\n  const [commandKey, ...restTokens] = parts;\n  const definition = SLASH_COMMAND_DEFINITION_MAP.get(commandKey);\n\n  if (!definition) {\n    return {\n      type: \"unknown-command\",\n      command: commandKey ?? \"\",\n      subcommand: restTokens[0],\n    };\n  }\n\n  const path: SlashCommandDefinition[] = [definition];\n  let remainingTokens = restTokens;\n\n  while (remainingTokens.length > 0) {\n    const currentDefinition = path[path.length - 1];\n    const children = currentDefinition.children ?? [];\n    const nextToken = remainingTokens[0];\n    const nextDefinition = children.find((child) => child.key === nextToken);\n\n    if (!nextDefinition) {\n      break;\n    }\n\n    path.push(nextDefinition);\n    remainingTokens = remainingTokens.slice(1);\n  }\n\n  const targetDefinition = path[path.length - 1];\n\n  if (!targetDefinition.handler) {\n    return {\n      type: \"unknown-command\",\n      command: commandKey ?? \"\",\n      subcommand: remainingTokens[0],\n    };\n  }\n\n  const cleanRemainingTokens = remainingTokens.map((token) => token.replace(/^\"(.*)\"$/, \"$1\"));\n\n  return targetDefinition.handler({\n    definition: targetDefinition,\n    path,\n    remainingTokens,\n    cleanRemainingTokens,\n  });\n}\n\n/**\n * Set a nested property value using a key path\n * @param obj The object to modify\n * @param keyPath Array of keys representing the path (e.g., [\"baseUrl\", \"scheme\"])\n * @param value The value to set\n */\nexport function setNestedProperty(\n  obj: Record<string, unknown>,\n  keyPath: string[],\n  value: string\n): void {\n  if (keyPath.length === 0) {\n    return;\n  }\n\n  let current = obj;\n  for (let i = 0; i < keyPath.length - 1; i++) {\n    const key = keyPath[i];\n    if (!(key in current) || typeof current[key] !== \"object\" || current[key] === null) {\n      current[key] = {};\n    }\n    current = current[key] as Record<string, unknown>;\n  }\n\n  const lastKey = keyPath[keyPath.length - 1];\n  current[lastKey] = value;\n}\n\n/**\n * Get slash command definitions for use in suggestions\n */\nexport function getSlashCommandDefinitions(): readonly SlashCommandDefinition[] {\n  return Array.from(SLASH_COMMAND_DEFINITION_MAP.values());\n}\n"]}