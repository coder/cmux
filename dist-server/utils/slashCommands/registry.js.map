{"version":3,"file":"registry.js","sourceRoot":"","sources":["../../../src/utils/slashCommands/registry.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AASH,wCAAwC;AAC3B,QAAA,mBAAmB,GAA2B;IACzD,IAAI,EAAE,2BAA2B;IACjC,MAAM,EAAE,6BAA6B;IACrC,OAAO,EAAE,cAAc;IACvB,WAAW,EAAE,kBAAkB;IAC/B,KAAK,EAAE,oBAAoB;CAC5B,CAAC;AAEF,8BAA8B;AAC9B,MAAM,sBAAsB,GAA2B;IACrD;QACE,GAAG,EAAE,WAAW;QAChB,WAAW,EAAE,6BAA6B;KAC3C;IACD;QACE,GAAG,EAAE,QAAQ;QACb,WAAW,EAAE,iBAAiB;KAC/B;IACD;QACE,GAAG,EAAE,QAAQ;QACb,WAAW,EAAE,wBAAwB;KACtC;CACF,CAAC;AAEF,MAAM,qBAAqB,GAA2C;IACpE,SAAS,EAAE;QACT;YACE,GAAG,EAAE,QAAQ;YACb,WAAW,EAAE,qCAAqC;SACnD;QACD;YACE,GAAG,EAAE,SAAS;YACd,WAAW,EAAE,6BAA6B;SAC3C;QACD;YACE,GAAG,EAAE,gBAAgB;YACrB,WAAW,EAAE,kCAAkC;SAChD;KACF;IACD,MAAM,EAAE;QACN;YACE,GAAG,EAAE,QAAQ;YACb,WAAW,EAAE,kCAAkC;SAChD;QACD;YACE,GAAG,EAAE,SAAS;YACd,WAAW,EAAE,0BAA0B;SACxC;KACF;IACD,MAAM,EAAE;QACN;YACE,GAAG,EAAE,QAAQ;YACb,WAAW,EAAE,yCAAyC;SACvD;KACF;IACD,OAAO,EAAE;QACP;YACE,GAAG,EAAE,QAAQ;YACb,WAAW,EAAE,kCAAkC;SAChD;QACD;YACE,GAAG,EAAE,SAAS;YACd,WAAW,EAAE,4BAA4B;SAC1C;QACD;YACE,GAAG,EAAE,gBAAgB;YACrB,WAAW,EAAE,kCAAkC;SAChD;KACF;CACF,CAAC;AAEF,8BAA8B;AAC9B,SAAS,uBAAuB,CAC9B,WAAyB,EACzB,OAAe,EACf,KAAyC;IAEzC,MAAM,iBAAiB,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;IAEvD,OAAO,WAAW;SACf,MAAM,CAAC,CAAC,UAAU,EAAE,EAAE,CACrB,iBAAiB,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,IAAI,CACtF;SACA,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;AAC5C,CAAC;AAED,SAAS,iBAAiB,CAAiC,WAAyB;IAClF,MAAM,IAAI,GAAG,IAAI,GAAG,EAAU,CAAC;IAC/B,MAAM,MAAM,GAAQ,EAAE,CAAC;IAEvB,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE,CAAC;QACrC,MAAM,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;QACzC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;YAClB,SAAS;QACX,CAAC;QACD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACd,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1B,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,sBAAsB,GAA2B;IACrD,GAAG,EAAE,OAAO;IACZ,WAAW,EAAE,4BAA4B;IACzC,WAAW,EAAE,KAAK;IAClB,OAAO,EAAE,CAAC,EAAE,oBAAoB,EAAE,EAAE,EAAE;QACpC,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACpC,OAAO;gBACL,IAAI,EAAE,iBAAiB;gBACvB,OAAO,EAAE,OAAO;gBAChB,UAAU,EAAE,oBAAoB,CAAC,CAAC,CAAC;aACpC,CAAC;QACJ,CAAC;QAED,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF,CAAC;AAEF,MAAM,yBAAyB,GAA2B;IACxD,GAAG,EAAE,UAAU;IACf,WAAW,EAAE,qDAAqD;IAClE,OAAO,EAAE,CAAC,EAAE,oBAAoB,EAAE,EAAiB,EAAE;QACnD,IAAI,oBAAoB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACtC,OAAO;gBACL,IAAI,EAAE,iBAAiB;gBACvB,OAAO,EAAE,UAAU;gBACnB,UAAU,EAAE,SAAS;aACtB,CAAC;QACJ,CAAC;QAED,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACpC,OAAO;gBACL,IAAI,EAAE,iBAAiB;gBACvB,OAAO,EAAE,UAAU;gBACnB,UAAU,EAAE,oBAAoB,CAAC,CAAC,CAAC;aACpC,CAAC;QACJ,CAAC;QAED,2BAA2B;QAC3B,MAAM,MAAM,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;QAE/B,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC;YACvC,OAAO;gBACL,IAAI,EAAE,iBAAiB;gBACvB,OAAO,EAAE,UAAU;gBACnB,UAAU,EAAE,MAAM;aACnB,CAAC;QACJ,CAAC;QAED,qBAAqB;QACrB,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;IACrD,CAAC;CACF,CAAC;AAEF,MAAM,wBAAwB,GAA2B;IACvD,GAAG,EAAE,SAAS;IACd,WAAW,EAAE,qDAAqD;IAClE,OAAO,EAAE,CAAC,EAAE,oBAAoB,EAAE,EAAiB,EAAE;QACnD,+DAA+D;QAC/D,IAAI,eAAmC,CAAC;QACxC,IAAI,iBAAiB,GAAG,CAAC,CAAC;QAE1B,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACpC,MAAM,UAAU,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;YAC3C,MAAM,MAAM,GAAG,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;YAExC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC;gBACjC,eAAe,GAAG,MAAM,CAAC;gBACzB,iBAAiB,GAAG,CAAC,CAAC;YACxB,CAAC;QACH,CAAC;QAED,sDAAsD;QACtD,MAAM,YAAY,GAChB,oBAAoB,CAAC,MAAM,GAAG,iBAAiB;YAC7C,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;YACzD,CAAC,CAAC,SAAS,CAAC;QAEhB,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,eAAe,EAAE,YAAY,EAAE,CAAC;IAC5D,CAAC;CACF,CAAC;AAEF,MAAM,6BAA6B,GAA2B;IAC5D,GAAG,EAAE,KAAK;IACV,WAAW,EAAE,oCAAoC;IACjD,OAAO,EAAE,CAAC,EAAE,oBAAoB,EAAE,EAAE,EAAE;QACpC,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACpC,OAAO;gBACL,IAAI,EAAE,wBAAwB;gBAC9B,UAAU,EAAE,KAAK;gBACjB,QAAQ,EAAE,oBAAoB,CAAC,MAAM;aACtC,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,UAAU,CAAC,GAAG,oBAAoB,CAAC;QAC5D,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnC,MAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE/B,OAAO;YACL,IAAI,EAAE,eAAe;YACrB,QAAQ;YACR,OAAO;YACP,KAAK;SACN,CAAC;IACJ,CAAC;IACD,WAAW,EAAE,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,eAAe,EAAE,OAAO,EAAE,EAAE,EAAE;QACjE,qCAAqC;QACrC,IAAI,KAAK,KAAK,CAAC,EAAE,CAAC;YAChB,MAAM,kBAAkB,GAAG,CAAC,OAAO,CAAC,aAAa,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBACtE,GAAG,EAAE,IAAI;gBACT,WAAW,EAAE,GAAG,IAAI,yBAAyB;aAC9C,CAAC,CAAC,CAAC;YAEJ,MAAM,QAAQ,GAAG,iBAAiB,CAAC,CAAC,GAAG,kBAAkB,EAAE,GAAG,sBAAsB,CAAC,CAAC,CAAC;YAEvF,OAAO,uBAAuB,CAAC,QAAQ,EAAE,YAAY,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;gBACtE,EAAE,EAAE,yBAAyB,UAAU,CAAC,GAAG,EAAE;gBAC7C,OAAO,EAAE,UAAU,CAAC,GAAG;gBACvB,WAAW,EAAE,UAAU,CAAC,WAAW;gBACnC,WAAW,EAAE,kBAAkB,UAAU,CAAC,GAAG,GAAG;aACjD,CAAC,CAAC,CAAC;QACN,CAAC;QAED,2CAA2C;QAC3C,IAAI,KAAK,KAAK,CAAC,EAAE,CAAC;YAChB,MAAM,YAAY,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,WAAW,GAAG;gBAClB,GAAG,CAAC,YAAY,IAAI,qBAAqB,CAAC,YAAY,CAAC;oBACrD,CAAC,CAAC,qBAAqB,CAAC,YAAY,CAAC;oBACrC,CAAC,CAAC,EAAE,CAAC;gBACP,GAAG,qBAAqB,CAAC,OAAO;aACjC,CAAC;YAEF,MAAM,QAAQ,GAAG,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAEhD,OAAO,uBAAuB,CAAC,QAAQ,EAAE,YAAY,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;gBACtE,EAAE,EAAE,yBAAyB,YAAY,IAAI,UAAU,CAAC,GAAG,EAAE;gBAC7D,OAAO,EAAE,UAAU,CAAC,GAAG;gBACvB,WAAW,EAAE,UAAU,CAAC,WAAW;gBACnC,WAAW,EAAE,kBAAkB,YAAY,IAAI,EAAE,IAAI,UAAU,CAAC,GAAG,GAAG;aACvE,CAAC,CAAC,CAAC;QACN,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAC;AAEF,MAAM,0BAA0B,GAA2B;IACzD,GAAG,EAAE,WAAW;IAChB,WAAW,EAAE,gCAAgC;IAC7C,OAAO,EAAE,CAAC,EAAE,oBAAoB,EAAE,EAAE,EAAE;QACpC,IAAI,oBAAoB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACtC,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC;QACpC,CAAC;QAED,OAAO;YACL,IAAI,EAAE,8BAA8B;YACpC,UAAU,EAAE,oBAAoB,CAAC,CAAC,CAAC,IAAI,EAAE;SAC1C,CAAC;IACJ,CAAC;IACD,QAAQ,EAAE,CAAC,6BAA6B,CAAC;CAC1C,CAAC;AAEF,MAAM,sBAAsB,GAA2B;IACrD,GAAG,EAAE,OAAO;IACZ,WAAW,EAAE,iBAAiB;IAC9B,OAAO,EAAE,CAAC,EAAE,oBAAoB,EAAE,EAAiB,EAAE;QACnD,IAAI,oBAAoB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACtC,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;QAChC,CAAC;QAED,IAAI,oBAAoB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACtC,MAAM,KAAK,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;YAEtC,gCAAgC;YAChC,IAAI,2BAAmB,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC/B,OAAO;oBACL,IAAI,EAAE,WAAW;oBACjB,WAAW,EAAE,2BAAmB,CAAC,KAAK,CAAC;iBACxC,CAAC;YACJ,CAAC;YAED,+FAA+F;YAC/F,OAAO;gBACL,IAAI,EAAE,WAAW;gBACjB,WAAW,EAAE,KAAK;aACnB,CAAC;QACJ,CAAC;QAED,qBAAqB;QACrB,OAAO;YACL,IAAI,EAAE,iBAAiB;YACvB,OAAO,EAAE,OAAO;YAChB,UAAU,EAAE,oBAAoB,CAAC,CAAC,CAAC;SACpC,CAAC;IACJ,CAAC;IACD,WAAW,EAAE,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,EAAE;QACvC,iCAAiC;QACjC,IAAI,KAAK,KAAK,CAAC,EAAE,CAAC;YAChB,MAAM,uBAAuB,GAAG,MAAM,CAAC,OAAO,CAAC,2BAAmB,CAAC,CAAC,GAAG,CACrE,CAAC,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC;gBACxB,GAAG,EAAE,MAAM;gBACX,WAAW,EAAE,SAAS;aACvB,CAAC,CACH,CAAC;YAEF,OAAO,uBAAuB,CAAC,uBAAuB,EAAE,YAAY,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;gBACrF,EAAE,EAAE,iBAAiB,UAAU,CAAC,GAAG,EAAE;gBACrC,OAAO,EAAE,UAAU,CAAC,GAAG;gBACvB,WAAW,EAAE,UAAU,CAAC,WAAW;gBACnC,WAAW,EAAE,UAAU,UAAU,CAAC,GAAG,EAAE;aACxC,CAAC,CAAC,CAAC;QACN,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAC;AAEW,QAAA,yBAAyB,GAAsC;IAC1E,sBAAsB;IACtB,yBAAyB;IACzB,wBAAwB;IACxB,sBAAsB;IACtB,0BAA0B;CAC3B,CAAC;AAEW,QAAA,4BAA4B,GAAG,IAAI,GAAG,CACjD,iCAAyB,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAC5E,CAAC","sourcesContent":["/**\n * Command registry - All slash commands are declared here\n */\n\nimport type {\n  SlashCommandDefinition,\n  ParsedCommand,\n  SlashSuggestion,\n  SuggestionDefinition,\n} from \"./types\";\n\n// Model abbreviations for common models\nexport const MODEL_ABBREVIATIONS: Record<string, string> = {\n  opus: \"anthropic:claude-opus-4-1\",\n  sonnet: \"anthropic:claude-sonnet-4-5\",\n  \"gpt-5\": \"openai:gpt-5\",\n  \"gpt-5-pro\": \"openai:gpt-5-pro\",\n  codex: \"openai:gpt-5-codex\",\n};\n\n// Provider configuration data\nconst DEFAULT_PROVIDER_NAMES: SuggestionDefinition[] = [\n  {\n    key: \"anthropic\",\n    description: \"Anthropic (Claude) provider\",\n  },\n  {\n    key: \"openai\",\n    description: \"OpenAI provider\",\n  },\n  {\n    key: \"google\",\n    description: \"Google Gemini provider\",\n  },\n];\n\nconst DEFAULT_PROVIDER_KEYS: Record<string, SuggestionDefinition[]> = {\n  anthropic: [\n    {\n      key: \"apiKey\",\n      description: \"API key used when calling Anthropic\",\n    },\n    {\n      key: \"baseUrl\",\n      description: \"Override Anthropic base URL\",\n    },\n    {\n      key: \"baseUrl.scheme\",\n      description: \"Protocol to use for the base URL\",\n    },\n  ],\n  openai: [\n    {\n      key: \"apiKey\",\n      description: \"API key used when calling OpenAI\",\n    },\n    {\n      key: \"baseUrl\",\n      description: \"Override OpenAI base URL\",\n    },\n  ],\n  google: [\n    {\n      key: \"apiKey\",\n      description: \"API key used when calling Google Gemini\",\n    },\n  ],\n  default: [\n    {\n      key: \"apiKey\",\n      description: \"API key required by the provider\",\n    },\n    {\n      key: \"baseUrl\",\n      description: \"Override provider base URL\",\n    },\n    {\n      key: \"baseUrl.scheme\",\n      description: \"Protocol to use for the base URL\",\n    },\n  ],\n};\n\n// Suggestion helper functions\nfunction filterAndMapSuggestions<T extends SuggestionDefinition>(\n  definitions: readonly T[],\n  partial: string,\n  build: (definition: T) => SlashSuggestion\n): SlashSuggestion[] {\n  const normalizedPartial = partial.trim().toLowerCase();\n\n  return definitions\n    .filter((definition) =>\n      normalizedPartial ? definition.key.toLowerCase().startsWith(normalizedPartial) : true\n    )\n    .map((definition) => build(definition));\n}\n\nfunction dedupeDefinitions<T extends SuggestionDefinition>(definitions: readonly T[]): T[] {\n  const seen = new Set<string>();\n  const result: T[] = [];\n\n  for (const definition of definitions) {\n    const key = definition.key.toLowerCase();\n    if (seen.has(key)) {\n      continue;\n    }\n    seen.add(key);\n    result.push(definition);\n  }\n\n  return result;\n}\n\nconst clearCommandDefinition: SlashCommandDefinition = {\n  key: \"clear\",\n  description: \"Clear conversation history\",\n  appendSpace: false,\n  handler: ({ cleanRemainingTokens }) => {\n    if (cleanRemainingTokens.length > 0) {\n      return {\n        type: \"unknown-command\",\n        command: \"clear\",\n        subcommand: cleanRemainingTokens[0],\n      };\n    }\n\n    return { type: \"clear\" };\n  },\n};\n\nconst truncateCommandDefinition: SlashCommandDefinition = {\n  key: \"truncate\",\n  description: \"Truncate conversation history by percentage (0-100)\",\n  handler: ({ cleanRemainingTokens }): ParsedCommand => {\n    if (cleanRemainingTokens.length === 0) {\n      return {\n        type: \"unknown-command\",\n        command: \"truncate\",\n        subcommand: undefined,\n      };\n    }\n\n    if (cleanRemainingTokens.length > 1) {\n      return {\n        type: \"unknown-command\",\n        command: \"truncate\",\n        subcommand: cleanRemainingTokens[1],\n      };\n    }\n\n    // Parse percentage (0-100)\n    const pctStr = cleanRemainingTokens[0];\n    const pct = parseFloat(pctStr);\n\n    if (isNaN(pct) || pct < 0 || pct > 100) {\n      return {\n        type: \"unknown-command\",\n        command: \"truncate\",\n        subcommand: pctStr,\n      };\n    }\n\n    // Convert to 0.0-1.0\n    return { type: \"truncate\", percentage: pct / 100 };\n  },\n};\n\nconst compactCommandDefinition: SlashCommandDefinition = {\n  key: \"compact\",\n  description: \"Compact conversation history using AI summarization\",\n  handler: ({ cleanRemainingTokens }): ParsedCommand => {\n    // Parse optional maxOutputTokens (first arg, must be a number)\n    let maxOutputTokens: number | undefined;\n    let instructionsStart = 0;\n\n    if (cleanRemainingTokens.length > 0) {\n      const firstToken = cleanRemainingTokens[0];\n      const parsed = parseInt(firstToken, 10);\n\n      if (!isNaN(parsed) && parsed > 0) {\n        maxOutputTokens = parsed;\n        instructionsStart = 1;\n      }\n    }\n\n    // Parse optional instructions (remaining args joined)\n    const instructions =\n      cleanRemainingTokens.length > instructionsStart\n        ? cleanRemainingTokens.slice(instructionsStart).join(\" \")\n        : undefined;\n\n    return { type: \"compact\", maxOutputTokens, instructions };\n  },\n};\n\nconst providersSetCommandDefinition: SlashCommandDefinition = {\n  key: \"set\",\n  description: \"Set a provider configuration value\",\n  handler: ({ cleanRemainingTokens }) => {\n    if (cleanRemainingTokens.length < 3) {\n      return {\n        type: \"providers-missing-args\",\n        subcommand: \"set\",\n        argCount: cleanRemainingTokens.length,\n      };\n    }\n\n    const [provider, key, ...valueParts] = cleanRemainingTokens;\n    const value = valueParts.join(\" \");\n    const keyPath = key.split(\".\");\n\n    return {\n      type: \"providers-set\",\n      provider,\n      keyPath,\n      value,\n    };\n  },\n  suggestions: ({ stage, partialToken, completedTokens, context }) => {\n    // Stage 2: /providers set [provider]\n    if (stage === 2) {\n      const dynamicDefinitions = (context.providerNames ?? []).map((name) => ({\n        key: name,\n        description: `${name} provider configuration`,\n      }));\n\n      const combined = dedupeDefinitions([...dynamicDefinitions, ...DEFAULT_PROVIDER_NAMES]);\n\n      return filterAndMapSuggestions(combined, partialToken, (definition) => ({\n        id: `command:providers:set:${definition.key}`,\n        display: definition.key,\n        description: definition.description,\n        replacement: `/providers set ${definition.key} `,\n      }));\n    }\n\n    // Stage 3: /providers set <provider> [key]\n    if (stage === 3) {\n      const providerName = completedTokens[2];\n      const definitions = [\n        ...(providerName && DEFAULT_PROVIDER_KEYS[providerName]\n          ? DEFAULT_PROVIDER_KEYS[providerName]\n          : []),\n        ...DEFAULT_PROVIDER_KEYS.default,\n      ];\n\n      const combined = dedupeDefinitions(definitions);\n\n      return filterAndMapSuggestions(combined, partialToken, (definition) => ({\n        id: `command:providers:set:${providerName}:${definition.key}`,\n        display: definition.key,\n        description: definition.description,\n        replacement: `/providers set ${providerName ?? \"\"} ${definition.key} `,\n      }));\n    }\n\n    return null;\n  },\n};\n\nconst providersCommandDefinition: SlashCommandDefinition = {\n  key: \"providers\",\n  description: \"Configure AI provider settings\",\n  handler: ({ cleanRemainingTokens }) => {\n    if (cleanRemainingTokens.length === 0) {\n      return { type: \"providers-help\" };\n    }\n\n    return {\n      type: \"providers-invalid-subcommand\",\n      subcommand: cleanRemainingTokens[0] ?? \"\",\n    };\n  },\n  children: [providersSetCommandDefinition],\n};\n\nconst modelCommandDefinition: SlashCommandDefinition = {\n  key: \"model\",\n  description: \"Select AI model\",\n  handler: ({ cleanRemainingTokens }): ParsedCommand => {\n    if (cleanRemainingTokens.length === 0) {\n      return { type: \"model-help\" };\n    }\n\n    if (cleanRemainingTokens.length === 1) {\n      const token = cleanRemainingTokens[0];\n\n      // Check if it's an abbreviation\n      if (MODEL_ABBREVIATIONS[token]) {\n        return {\n          type: \"model-set\",\n          modelString: MODEL_ABBREVIATIONS[token],\n        };\n      }\n\n      // Otherwise treat as full model string (e.g., \"anthropic:opus\" or \"anthropic:claude-opus-4-1\")\n      return {\n        type: \"model-set\",\n        modelString: token,\n      };\n    }\n\n    // Too many arguments\n    return {\n      type: \"unknown-command\",\n      command: \"model\",\n      subcommand: cleanRemainingTokens[1],\n    };\n  },\n  suggestions: ({ stage, partialToken }) => {\n    // Stage 1: /model [abbreviation]\n    if (stage === 1) {\n      const abbreviationSuggestions = Object.entries(MODEL_ABBREVIATIONS).map(\n        ([abbrev, fullModel]) => ({\n          key: abbrev,\n          description: fullModel,\n        })\n      );\n\n      return filterAndMapSuggestions(abbreviationSuggestions, partialToken, (definition) => ({\n        id: `command:model:${definition.key}`,\n        display: definition.key,\n        description: definition.description,\n        replacement: `/model ${definition.key}`,\n      }));\n    }\n\n    return null;\n  },\n};\n\nexport const SLASH_COMMAND_DEFINITIONS: readonly SlashCommandDefinition[] = [\n  clearCommandDefinition,\n  truncateCommandDefinition,\n  compactCommandDefinition,\n  modelCommandDefinition,\n  providersCommandDefinition,\n];\n\nexport const SLASH_COMMAND_DEFINITION_MAP = new Map(\n  SLASH_COMMAND_DEFINITIONS.map((definition) => [definition.key, definition])\n);\n"]}