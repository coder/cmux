{"version":3,"file":"tools.js","sourceRoot":"","sources":["../../../src/utils/tools/tools.ts"],"names":[],"mappings":";;AA+BA,4CAmDC;AAjFD,iDAA8C;AAC9C,2CAAwC;AACxC,2CAAwC;AACxC,0DAAgE;AAChE,gDAAuD;AACvD,0EAA+E;AAC/E,wEAA6E;AAC7E,gEAAsE;AACtE,sEAA4E;AAC5E,wCAAqC;AAerC;;;;;GAKG;AACH,SAAgB,gBAAgB,CAC9B,WAAmB,EACnB,MAAyB;IAEzB,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEnD,sCAAsC;IACtC,MAAM,SAAS,GAAyB;QACtC,0EAA0E;QAC1E,SAAS,EAAE,IAAA,8BAAkB,EAAC,MAAM,CAAC;QACrC,iBAAiB,EAAE,IAAA,6CAAyB,EAAC,MAAM,CAAC;QACpD,gBAAgB,EAAE,IAAA,2CAAwB,EAAC,MAAM,CAAC;QAClD,IAAI,EAAE,IAAA,qBAAc,EAAC,MAAM,CAAC;QAC5B,YAAY,EAAE,IAAA,oCAAqB,EAAC,MAAM,CAAC;QAC3C,eAAe,EAAE,IAAA,0CAAwB,EAAC,MAAM,CAAC;KAClD,CAAC;IAEF,6DAA6D;IAC7D,sDAAsD;IACtD,IAAI,CAAC;QACH,QAAQ,QAAQ,EAAE,CAAC;YACjB,KAAK,WAAW;gBACd,OAAO;oBACL,GAAG,SAAS;oBACZ,UAAU,EAAE,qBAAS,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;iBAClE,CAAC;YAEJ,KAAK,QAAQ;gBACX,iDAAiD;gBACjD,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;oBAC3D,OAAO;wBACL,GAAG,SAAS;wBACZ,UAAU,EAAE,eAAM,CAAC,KAAK,CAAC,SAAS,CAAC;4BACjC,iBAAiB,EAAE,MAAM;yBAC1B,CAAC;qBACH,CAAC;gBACJ,CAAC;gBACD,MAAM;YAER,KAAK,QAAQ;gBACX,OAAO;oBACL,GAAG,SAAS;oBACZ,aAAa,EAAE,eAAM,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC;iBAC7C,CAAC;QACN,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,oDAAoD;QACpD,SAAG,CAAC,KAAK,CAAC,qCAAqC,QAAQ,GAAG,EAAE,KAAK,CAAC,CAAC;IACrE,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import { type Tool } from \"ai\";\nimport { anthropic } from \"@ai-sdk/anthropic\";\nimport { openai } from \"@ai-sdk/openai\";\nimport { google } from \"@ai-sdk/google\";\nimport { createFileReadTool } from \"@/services/tools/file_read\";\nimport { createBashTool } from \"@/services/tools/bash\";\nimport { createFileEditReplaceTool } from \"@/services/tools/file_edit_replace\";\nimport { createFileEditInsertTool } from \"@/services/tools/file_edit_insert\";\nimport { createProposePlanTool } from \"@/services/tools/propose_plan\";\nimport { createCompactSummaryTool } from \"@/services/tools/compact_summary\";\nimport { log } from \"@/services/log\";\n\n/**\n * Configuration for tools that need runtime context\n */\nexport interface ToolConfiguration {\n  /** Working directory for command execution (required) */\n  cwd: string;\n}\n\n/**\n * Factory function interface for creating tools with configuration\n */\nexport type ToolFactory = (config: ToolConfiguration) => Tool;\n\n/**\n * Get tools available for a specific model with configuration\n * @param modelString The model string in format \"provider:model-id\"\n * @param config Required configuration for tools\n * @returns Record of tools available for the model\n */\nexport function getToolsForModel(\n  modelString: string,\n  config: ToolConfiguration\n): Record<string, Tool> {\n  const [provider, modelId] = modelString.split(\":\");\n\n  // Base tools available for all models\n  const baseTools: Record<string, Tool> = {\n    // Use snake_case for tool names to match what seems to be the convention.\n    file_read: createFileReadTool(config),\n    file_edit_replace: createFileEditReplaceTool(config),\n    file_edit_insert: createFileEditInsertTool(config),\n    bash: createBashTool(config),\n    propose_plan: createProposePlanTool(config),\n    compact_summary: createCompactSummaryTool(config),\n  };\n\n  // Try to add provider-specific web search tools if available\n  // This doesn't break if the provider isn't recognized\n  try {\n    switch (provider) {\n      case \"anthropic\":\n        return {\n          ...baseTools,\n          web_search: anthropic.tools.webSearch_20250305({ maxUses: 1000 }),\n        };\n\n      case \"openai\":\n        // Only add web search for models that support it\n        if (modelId.includes(\"gpt-5\") || modelId.includes(\"gpt-4\")) {\n          return {\n            ...baseTools,\n            web_search: openai.tools.webSearch({\n              searchContextSize: \"high\",\n            }),\n          };\n        }\n        break;\n\n      case \"google\":\n        return {\n          ...baseTools,\n          google_search: google.tools.googleSearch({}),\n        };\n    }\n  } catch (error) {\n    // If tools aren't available, just return base tools\n    log.error(`No web search tools available for ${provider}:`, error);\n  }\n\n  return baseTools;\n}\n"]}