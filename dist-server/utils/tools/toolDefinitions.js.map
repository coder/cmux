{"version":3,"file":"toolDefinitions.js","sourceRoot":"","sources":["../../../src/utils/tools/toolDefinitions.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Tool definitions module - Frontend-safe\n *\n * Single source of truth for all tool definitions.\n * Zod schemas are defined here and JSON schemas are auto-generated.\n */\n\nimport { z } from \"zod\";\nimport { BASH_DEFAULT_MAX_LINES, BASH_HARD_MAX_LINES } from \"@/constants/toolLimits\";\n\nimport { zodToJsonSchema } from \"zod-to-json-schema\";\n\ninterface ToolSchema {\n  name: string;\n  description: string;\n  inputSchema: {\n    type: string;\n    properties: Record<string, unknown>;\n    required: string[];\n  };\n}\n\n/**\n * Shared schema definitions\n */\nconst leaseSchema = z\n  .string()\n  .describe(\"The lease from the file_read result. Used to prevent edits on stale file state.\");\n\n/**\n * Tool definitions: single source of truth\n * Key = tool name, Value = { description, schema }\n */\nexport const TOOL_DEFINITIONS = {\n  bash: {\n    description: \"Execute a bash command with a configurable timeout\",\n    schema: z.object({\n      script: z.string().describe(\"The bash script/command to execute\"),\n      timeout_secs: z\n        .number()\n        .positive()\n        .describe(\n          \"Timeout (seconds). Start small and increase on retry; avoid large initial values to keep UX responsive\"\n        ),\n      max_lines: z\n        .number()\n        .int()\n        .positive()\n        .max(\n          BASH_HARD_MAX_LINES,\n          `Maximum number of output lines to return (hard capped at ${BASH_HARD_MAX_LINES}). Command will be killed if output exceeds this limit.`\n        )\n        .default(BASH_DEFAULT_MAX_LINES),\n      stdin: z\n        .string()\n        .optional()\n        .describe(\n          \"Optional input to provide to the command via stdin. Useful for avoiding shell escaping issues when passing complex data to commands.\"\n        ),\n    }),\n  },\n  file_read: {\n    description:\n      \"Read the contents of a file from the file system. Read as little as possible to complete the task.\",\n    schema: z.object({\n      filePath: z.string().describe(\"The path to the file to read (absolute or relative)\"),\n      offset: z\n        .number()\n        .int()\n        .positive()\n        .optional()\n        .describe(\"1-based starting line number (optional, defaults to 1)\"),\n      limit: z\n        .number()\n        .int()\n        .positive()\n        .optional()\n        .describe(\"Number of lines to return from offset (optional, returns all if not specified)\"),\n    }),\n  },\n  file_edit_replace: {\n    description:\n      \"Apply one or more edits to a file by replacing exact text matches. All edits are applied sequentially. Each old_string must be unique in the file unless replace_count > 1 or replace_count is -1.\",\n    schema: z.object({\n      file_path: z.string().describe(\"The absolute path to the file to edit\"),\n      edits: z\n        .array(\n          z.object({\n            old_string: z\n              .string()\n              .describe(\n                \"The exact text to replace (must be unique in file if replace_count is 1). Include enough context (indentation, surrounding lines) to make it unique.\"\n              ),\n            new_string: z.string().describe(\"The replacement text\"),\n            replace_count: z\n              .number()\n              .int()\n              .optional()\n              .describe(\n                \"Number of occurrences to replace (default: 1). Use -1 to replace all occurrences. If 1, old_string must be unique in the file.\"\n              ),\n          })\n        )\n        .min(1)\n        .describe(\"Array of edits to apply sequentially\"),\n      lease: leaseSchema,\n    }),\n  },\n  file_edit_insert: {\n    description:\n      \"Insert content at a specific line position in a file. Line offset is 1-indexed: 0 inserts at the top, 1 inserts after line 1, etc.\",\n    schema: z.object({\n      file_path: z.string().describe(\"The absolute path to the file to edit\"),\n      line_offset: z\n        .number()\n        .int()\n        .min(0)\n        .describe(\"1-indexed line position (0 = insert at top, N = insert after line N)\"),\n      content: z.string().describe(\"The content to insert\"),\n      lease: leaseSchema,\n    }),\n  },\n  propose_plan: {\n    description:\n      \"Propose a plan before taking action. The plan should be complete but minimal - cover what needs to be decided or understood, nothing more. Use this tool to get approval before proceeding with implementation.\",\n    schema: z.object({\n      title: z\n        .string()\n        .describe(\"A short, descriptive title for the plan (e.g., 'Add User Authentication')\"),\n      plan: z\n        .string()\n        .describe(\n          \"Implementation plan in markdown (start at h2 level). \" +\n            \"Scale the detail to match the task complexity: for straightforward changes, briefly state what and why; \" +\n            \"for complex changes, explain approach, key decisions, risks/tradeoffs; \" +\n            \"for uncertain changes, clarify options and what needs user input. \" +\n            \"For highly complex concepts, use mermaid diagrams where they'd clarify better than text. \" +\n            \"Cover what's necessary to understand and approve the approach. Omit obvious details or ceremony.\"\n        ),\n    }),\n  },\n  compact_summary: {\n    description:\n      \"Summarize the conversation history into a compact form. This tool is used during context compaction to reduce token usage while preserving key information.\",\n    schema: z.object({\n      summary: z\n        .string()\n        .describe(\n          \"Compact summary of the conversation, preserving key decisions, context, and important details. Include enough information for the conversation to continue meaningfully.\"\n        ),\n    }),\n  },\n} as const;\n\n/**\n * Get tool definition schemas for token counting\n * JSON schemas are auto-generated from zod schemas\n *\n * @returns Record of tool name to schema\n */\nexport function getToolSchemas(): Record<string, ToolSchema> {\n  return Object.fromEntries(\n    Object.entries(TOOL_DEFINITIONS).map(([name, def]) => [\n      name,\n      {\n        name,\n        description: def.description,\n        inputSchema: zodToJsonSchema(def.schema) as ToolSchema[\"inputSchema\"],\n      },\n    ])\n  );\n}\n\n/**\n * Get which tools are available for a given model\n * @param modelString The model string (e.g., \"anthropic:claude-opus-4-1\")\n * @returns Array of tool names available for the model\n */\nexport function getAvailableTools(modelString: string): string[] {\n  const [provider] = modelString.split(\":\");\n\n  // Base tools available for all models\n  const baseTools = [\n    \"bash\",\n    \"file_read\",\n    \"file_edit_replace\",\n    \"file_edit_insert\",\n    \"propose_plan\",\n    \"compact_summary\",\n  ];\n\n  // Add provider-specific tools\n  switch (provider) {\n    case \"anthropic\":\n      return [...baseTools, \"web_search\"];\n    case \"openai\":\n      // Only some OpenAI models support web search\n      if (modelString.includes(\"gpt-4\") || modelString.includes(\"gpt-5\")) {\n        return [...baseTools, \"web_search\"];\n      }\n      return baseTools;\n    case \"google\":\n      return [...baseTools, \"google_search\"];\n    default:\n      return baseTools;\n  }\n}\n"]}