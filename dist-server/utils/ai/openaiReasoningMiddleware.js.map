{"version":3,"file":"openaiReasoningMiddleware.js","sourceRoot":"","sources":["../../../src/utils/ai/openaiReasoningMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * OpenAI Reasoning Middleware\n *\n * Fixes the \"reasoning without following item\" error by ensuring reasoning items\n * in the prompt are properly formatted for OpenAI's Responses API.\n *\n * The issue: OpenAI's streaming responses sometimes fail with:\n * \"Item 'rs_*' of type 'reasoning' was provided without its required following item\"\n *\n * This occurs when:\n * - The conversation includes previous reasoning parts in history\n * - OpenAI's Responses API expects reasoning items to be paired with content\n *\n * Solution: Strip reasoning items from the input messages before sending to OpenAI,\n * since OpenAI manages reasoning state via `previousResponseId` parameter.\n */\n\nimport type {\n  LanguageModelV2Middleware,\n  LanguageModelV2CallOptions,\n  LanguageModelV2Message,\n} from \"@ai-sdk/provider\";\nimport { log } from \"@/services/log\";\n\nexport const openaiReasoningFixMiddleware: LanguageModelV2Middleware = {\n  transformParams: ({\n    params,\n  }: {\n    type: \"generate\" | \"stream\";\n    params: LanguageModelV2CallOptions;\n  }) => {\n    // Only process if we have messages\n    if (!params.prompt || !Array.isArray(params.prompt)) {\n      return Promise.resolve(params);\n    }\n\n    log.debug(\"[OpenAI Middleware] Transforming params to fix reasoning items\");\n    log.debug(`[OpenAI Middleware] Input has ${params.prompt.length} messages`);\n\n    // Clone the prompt array to avoid mutations\n    const transformedPrompt = params.prompt\n      .map((message: LanguageModelV2Message) => {\n        // Only process assistant messages (reasoning comes from assistant)\n        if (message.role !== \"assistant\") {\n          return message;\n        }\n\n        // Filter out reasoning content from assistant messages\n        if (Array.isArray(message.content)) {\n          // Check if this message contains reasoning\n          const _hasReasoning = message.content.some(\n            (part) =>\n              typeof part === \"object\" &&\n              part !== null &&\n              \"type\" in part &&\n              part.type === \"reasoning\"\n          );\n\n          const filteredContent = message.content\n            .filter((part) => {\n              // Remove reasoning parts - OpenAI manages these via previousResponseId\n              if (typeof part === \"object\" && part !== null && \"type\" in part) {\n                return part.type !== \"reasoning\";\n              }\n              return true;\n            })\n            .map((part) => {\n              // Always strip OpenAI item IDs from parts that have them\n              // OpenAI manages these via previousResponseId, not via message content\n              if (typeof part === \"object\" && part !== null) {\n                // Check if part has providerOptions.openai.itemId\n                const partObj = part as unknown as Record<string, unknown>;\n                if (\n                  \"providerOptions\" in partObj &&\n                  typeof partObj.providerOptions === \"object\" &&\n                  partObj.providerOptions !== null &&\n                  \"openai\" in (partObj.providerOptions as Record<string, unknown>)\n                ) {\n                  // Strip the OpenAI provider options that contain item IDs\n                  const { providerOptions, ...restOfPart } = partObj;\n                  const { openai, ...restOfProviderOptions } = providerOptions as Record<\n                    string,\n                    unknown\n                  >;\n\n                  log.debug(\n                    `[OpenAI Middleware] Stripped OpenAI itemId from ${(part as { type?: string }).type ?? \"unknown\"} part`\n                  );\n\n                  // If there are other provider options, keep them\n                  if (Object.keys(restOfProviderOptions).length > 0) {\n                    return { ...restOfPart, providerOptions: restOfProviderOptions };\n                  }\n                  // Otherwise return without providerOptions\n                  return restOfPart;\n                }\n              }\n              return part;\n            });\n\n          // If all content was reasoning, remove this message entirely\n          if (filteredContent.length === 0 && message.content.length > 0) {\n            log.debug(\"[OpenAI Middleware] Removed reasoning-only assistant message from prompt\");\n            // Return null to signal this message should be removed\n            return null;\n          }\n\n          return {\n            ...message,\n            content: filteredContent,\n          };\n        }\n\n        return message;\n      })\n      .filter((msg): msg is LanguageModelV2Message => msg !== null); // Remove null messages\n\n    log.debug(\n      `[OpenAI Middleware] Filtered ${params.prompt.length - transformedPrompt.length} reasoning-only messages`\n    );\n\n    return Promise.resolve({\n      ...params,\n      prompt: transformedPrompt,\n    });\n  },\n};\n"]}