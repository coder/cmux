{"version":3,"file":"sources.js","sourceRoot":"","sources":["../../../src/utils/commands/sources.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CommandAction } from \"@/contexts/CommandRegistryContext\";\nimport { formatKeybind, KEYBINDS } from \"@/utils/ui/keybinds\";\nimport type { ProjectConfig } from \"@/config\";\nimport type { WorkspaceMetadata } from \"@/types/workspace\";\n\nexport interface BuildSourcesParams {\n  projects: Map<string, ProjectConfig>;\n  workspaceMetadata: Map<string, WorkspaceMetadata>;\n  selectedWorkspace: {\n    projectPath: string;\n    projectName: string;\n    workspacePath: string;\n    workspaceId: string;\n  } | null;\n  streamingModels: Map<string, string>;\n  // UI actions\n  onOpenNewWorkspaceModal: (projectPath: string) => void;\n  onCreateWorkspace: (projectPath: string, branchName: string) => Promise<void>;\n  onSelectWorkspace: (sel: {\n    projectPath: string;\n    projectName: string;\n    workspacePath: string;\n    workspaceId: string;\n  }) => void;\n  onRemoveWorkspace: (workspaceId: string) => Promise<{ success: boolean; error?: string }>;\n  onRenameWorkspace: (\n    workspaceId: string,\n    newName: string\n  ) => Promise<{ success: boolean; error?: string }>;\n  onAddProject: () => void;\n  onRemoveProject: (path: string) => void;\n  onToggleSidebar: () => void;\n  onNavigateWorkspace: (dir: \"next\" | \"prev\") => void;\n  onOpenWorkspaceInTerminal: (workspacePath: string) => void;\n}\n\nconst section = {\n  workspaces: \"Workspaces\",\n  navigation: \"Navigation\",\n  chat: \"Chat\",\n  mode: \"Modes & Model\",\n  help: \"Help\",\n  projects: \"Projects\",\n};\n\nexport function buildCoreSources(p: BuildSourcesParams): Array<() => CommandAction[]> {\n  const actions: Array<() => CommandAction[]> = [];\n\n  // Workspaces\n  actions.push(() => {\n    const list: CommandAction[] = [];\n\n    const selected = p.selectedWorkspace;\n    if (selected) {\n      list.push({\n        id: \"ws:new\",\n        title: \"Create New Workspace…\",\n        subtitle: `for ${selected.projectName}`,\n        section: section.workspaces,\n        shortcutHint: formatKeybind(KEYBINDS.NEW_WORKSPACE),\n        run: () => undefined,\n        prompt: {\n          title: \"New Workspace\",\n          fields: [\n            {\n              type: \"text\",\n              name: \"branchName\",\n              label: \"Branch name\",\n              placeholder: \"Enter branch name\",\n              validate: (v) => (!v.trim() ? \"Branch name is required\" : null),\n            },\n          ],\n          onSubmit: async (vals) => {\n            await p.onCreateWorkspace(selected.projectPath, vals.branchName.trim());\n          },\n        },\n      });\n    }\n\n    // Switch to workspace\n    for (const [projectPath, config] of p.projects.entries()) {\n      const projectName = projectPath.split(\"/\").pop() ?? projectPath;\n      for (const ws of config.workspaces) {\n        const meta = p.workspaceMetadata.get(ws.path);\n        if (!meta) continue;\n        const isCurrent = selected?.workspaceId === meta.id;\n        const isStreaming = p.streamingModels.has(meta.id);\n        list.push({\n          id: `ws:switch:${meta.id}`,\n          title: `${isCurrent ? \"• \" : \"\"}Switch to ${ws.path.split(\"/\").pop() ?? ws.path}`,\n          subtitle: `${projectName}${isStreaming ? \" • streaming\" : \"\"}`,\n          section: section.workspaces,\n          keywords: [projectName, ws.path],\n          run: () =>\n            p.onSelectWorkspace({\n              projectPath,\n              projectName,\n              workspacePath: ws.path,\n              workspaceId: meta.id,\n            }),\n        });\n      }\n    }\n\n    // Remove current workspace (rename action intentionally omitted until we add a proper modal)\n    if (selected) {\n      const workspaceDisplayName = `${selected.projectName}/${selected.workspacePath.split(\"/\").pop() ?? selected.workspacePath}`;\n      list.push({\n        id: \"ws:open-terminal-current\",\n        title: \"Open Current Workspace in Terminal\",\n        subtitle: workspaceDisplayName,\n        section: section.workspaces,\n        shortcutHint: formatKeybind(KEYBINDS.OPEN_TERMINAL),\n        run: () => {\n          p.onOpenWorkspaceInTerminal(selected.workspacePath);\n        },\n      });\n      list.push({\n        id: \"ws:remove\",\n        title: \"Remove Current Workspace…\",\n        subtitle: workspaceDisplayName,\n        section: section.workspaces,\n        run: async () => {\n          const ok = confirm(\"Remove current workspace? This cannot be undone.\");\n          if (ok) await p.onRemoveWorkspace(selected.workspaceId);\n        },\n      });\n      list.push({\n        id: \"ws:rename\",\n        title: \"Rename Current Workspace…\",\n        subtitle: workspaceDisplayName,\n        section: section.workspaces,\n        run: () => undefined,\n        prompt: {\n          title: \"Rename Workspace\",\n          fields: [\n            {\n              type: \"text\",\n              name: \"newName\",\n              label: \"New name\",\n              placeholder: \"Enter new workspace name\",\n              initialValue: selected.workspacePath.split(\"/\").pop() ?? \"\",\n              getInitialValue: () => selected.workspacePath.split(\"/\").pop() ?? \"\",\n              validate: (v) => (!v.trim() ? \"Name is required\" : null),\n            },\n          ],\n          onSubmit: async (vals) => {\n            await p.onRenameWorkspace(selected.workspaceId, vals.newName.trim());\n          },\n        },\n      });\n    }\n\n    if (p.workspaceMetadata.size > 0) {\n      list.push({\n        id: \"ws:open-terminal\",\n        title: \"Open Workspace in Terminal…\",\n        section: section.workspaces,\n        run: () => undefined,\n        prompt: {\n          title: \"Open Workspace in Terminal\",\n          fields: [\n            {\n              type: \"select\",\n              name: \"workspacePath\",\n              label: \"Workspace\",\n              placeholder: \"Search workspaces…\",\n              getOptions: () =>\n                Array.from(p.workspaceMetadata.values()).map((meta) => {\n                  const workspaceName = meta.workspacePath.split(\"/\").pop() ?? meta.workspacePath;\n                  const label = `${meta.projectName} / ${workspaceName}`;\n                  return {\n                    id: meta.workspacePath,\n                    label,\n                    keywords: [workspaceName, meta.projectName, meta.workspacePath, meta.id],\n                  };\n                }),\n            },\n          ],\n          onSubmit: (vals) => {\n            p.onOpenWorkspaceInTerminal(vals.workspacePath);\n          },\n        },\n      });\n      list.push({\n        id: \"ws:rename-any\",\n        title: \"Rename Workspace…\",\n        section: section.workspaces,\n        run: () => undefined,\n        prompt: {\n          title: \"Rename Workspace\",\n          fields: [\n            {\n              type: \"select\",\n              name: \"workspaceId\",\n              label: \"Select workspace\",\n              placeholder: \"Search workspaces…\",\n              getOptions: () =>\n                Array.from(p.workspaceMetadata.values()).map((meta) => {\n                  const workspaceName = meta.workspacePath.split(\"/\").pop() ?? meta.workspacePath;\n                  const label = `${meta.projectName} / ${workspaceName}`;\n                  return {\n                    id: meta.id,\n                    label,\n                    keywords: [workspaceName, meta.projectName, meta.workspacePath, meta.id],\n                  };\n                }),\n            },\n            {\n              type: \"text\",\n              name: \"newName\",\n              label: \"New name\",\n              placeholder: \"Enter new workspace name\",\n              getInitialValue: (values) => {\n                const meta = Array.from(p.workspaceMetadata.values()).find(\n                  (m) => m.id === values.workspaceId\n                );\n                return meta ? (meta.workspacePath.split(\"/\").pop() ?? \"\") : \"\";\n              },\n              validate: (v) => (!v.trim() ? \"Name is required\" : null),\n            },\n          ],\n          onSubmit: async (vals) => {\n            await p.onRenameWorkspace(vals.workspaceId, vals.newName.trim());\n          },\n        },\n      });\n      list.push({\n        id: \"ws:remove-any\",\n        title: \"Remove Workspace…\",\n        section: section.workspaces,\n        run: () => undefined,\n        prompt: {\n          title: \"Remove Workspace\",\n          fields: [\n            {\n              type: \"select\",\n              name: \"workspaceId\",\n              label: \"Select workspace\",\n              placeholder: \"Search workspaces…\",\n              getOptions: () =>\n                Array.from(p.workspaceMetadata.values()).map((meta) => {\n                  const workspaceName = meta.workspacePath.split(\"/\").pop() ?? meta.workspacePath;\n                  const label = `${meta.projectName}/${workspaceName}`;\n                  return {\n                    id: meta.id,\n                    label,\n                    keywords: [workspaceName, meta.projectName, meta.workspacePath, meta.id],\n                  };\n                }),\n            },\n          ],\n          onSubmit: async (vals) => {\n            const meta = Array.from(p.workspaceMetadata.values()).find(\n              (m) => m.id === vals.workspaceId\n            );\n            const workspaceName = meta\n              ? `${meta.projectName}/${meta.workspacePath.split(\"/\").pop() ?? meta.workspacePath}`\n              : vals.workspaceId;\n            const ok = confirm(`Remove workspace ${workspaceName}? This cannot be undone.`);\n            if (ok) {\n              await p.onRemoveWorkspace(vals.workspaceId);\n            }\n          },\n        },\n      });\n    }\n\n    return list;\n  });\n\n  // Navigation / Interface\n  actions.push(() => [\n    {\n      id: \"nav:next\",\n      title: \"Next Workspace\",\n      section: section.navigation,\n      shortcutHint: formatKeybind(KEYBINDS.NEXT_WORKSPACE),\n      run: () => p.onNavigateWorkspace(\"next\"),\n    },\n    {\n      id: \"nav:prev\",\n      title: \"Previous Workspace\",\n      section: section.navigation,\n      shortcutHint: formatKeybind(KEYBINDS.PREV_WORKSPACE),\n      run: () => p.onNavigateWorkspace(\"prev\"),\n    },\n    {\n      id: \"nav:toggleSidebar\",\n      title: \"Toggle Sidebar\",\n      section: section.navigation,\n      shortcutHint: formatKeybind(KEYBINDS.TOGGLE_SIDEBAR),\n      run: () => p.onToggleSidebar(),\n    },\n  ]);\n\n  // Chat utilities\n  actions.push(() => {\n    const list: CommandAction[] = [];\n    if (p.selectedWorkspace) {\n      const id = p.selectedWorkspace.workspaceId;\n      list.push({\n        id: \"chat:clear\",\n        title: \"Clear History\",\n        section: section.chat,\n        run: async () => {\n          await window.api.workspace.truncateHistory(id, 1.0);\n        },\n      });\n      for (const pct of [0.75, 0.5, 0.25]) {\n        list.push({\n          id: `chat:truncate:${pct}`,\n          title: `Truncate History to ${Math.round((1 - pct) * 100)}%`,\n          section: section.chat,\n          run: async () => {\n            await window.api.workspace.truncateHistory(id, pct);\n          },\n        });\n      }\n      list.push({\n        id: \"chat:interrupt\",\n        title: \"Interrupt Streaming\",\n        section: section.chat,\n        run: async () => {\n          await window.api.workspace.sendMessage(id, \"\");\n        },\n      });\n      list.push({\n        id: \"chat:jumpBottom\",\n        title: \"Jump to Bottom\",\n        section: section.chat,\n        shortcutHint: formatKeybind(KEYBINDS.JUMP_TO_BOTTOM),\n        run: () => {\n          // Dispatch the keybind; AIView listens for it\n          const ev = new KeyboardEvent(\"keydown\", { key: \"G\", shiftKey: true });\n          window.dispatchEvent(ev);\n        },\n      });\n    }\n    return list;\n  });\n\n  // Modes & Model\n  actions.push(() => [\n    {\n      id: \"mode:toggle\",\n      title: \"Toggle Plan/Exec Mode\",\n      section: section.mode,\n      shortcutHint: formatKeybind(KEYBINDS.TOGGLE_MODE),\n      run: () => {\n        const ev = new KeyboardEvent(\"keydown\", { key: \"M\", ctrlKey: true, shiftKey: true });\n        window.dispatchEvent(ev);\n      },\n    },\n    {\n      id: \"model:change\",\n      title: \"Change Model…\",\n      section: section.mode,\n      shortcutHint: formatKeybind(KEYBINDS.OPEN_MODEL_SELECTOR),\n      run: () => {\n        window.dispatchEvent(new CustomEvent(\"cmux:openModelSelector\"));\n      },\n    },\n  ]);\n\n  // Help / Docs\n  actions.push(() => [\n    {\n      id: \"help:keybinds\",\n      title: \"Show Keyboard Shortcuts\",\n      section: section.help,\n      run: () => {\n        try {\n          window.open(\"https://cmux.io/keybinds.html\", \"_blank\");\n        } catch {\n          /* ignore */\n        }\n      },\n    },\n  ]);\n\n  // Projects\n  actions.push(() => {\n    const list: CommandAction[] = [\n      {\n        id: \"project:add\",\n        title: \"Add Project…\",\n        section: section.projects,\n        run: () => p.onAddProject(),\n      },\n      {\n        id: \"ws:new-in-project\",\n        title: \"Create New Workspace in Project…\",\n        section: section.projects,\n        run: () => undefined,\n        prompt: {\n          title: \"New Workspace in Project\",\n          fields: [\n            {\n              type: \"select\",\n              name: \"projectPath\",\n              label: \"Select project\",\n              placeholder: \"Search projects…\",\n              getOptions: (_values) =>\n                Array.from(p.projects.keys()).map((projectPath) => ({\n                  id: projectPath,\n                  label: projectPath.split(\"/\").pop() ?? projectPath,\n                  keywords: [projectPath],\n                })),\n            },\n            {\n              type: \"text\",\n              name: \"branchName\",\n              label: \"Branch name\",\n              placeholder: \"Enter branch name\",\n              validate: (v) => (!v.trim() ? \"Branch name is required\" : null),\n            },\n          ],\n          onSubmit: async (vals) => {\n            await p.onCreateWorkspace(vals.projectPath, vals.branchName.trim());\n          },\n        },\n      },\n    ];\n\n    for (const [projectPath] of p.projects.entries()) {\n      const projectName = projectPath.split(\"/\").pop() ?? projectPath;\n      list.push({\n        id: `project:remove:${projectPath}`,\n        title: `Remove Project ${projectName}…`,\n        section: section.projects,\n        run: () => p.onRemoveProject(projectPath),\n      });\n    }\n    return list;\n  });\n\n  return actions;\n}\n"]}