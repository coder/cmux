{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * HTTP/WebSocket Server for cmux\n * Allows accessing cmux backend from mobile devices\n */\nimport express from \"express\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport cors from \"cors\";\nimport * as http from \"http\";\nimport * as path from \"path\";\nimport { Config } from \"./config\";\nimport { IpcMain } from \"./services/ipcMain\";\nimport { IPC_CHANNELS, getChatChannel } from \"./constants/ipc-constants\";\nimport type { IpcMain as ElectronIpcMain } from \"electron\";\nimport type { BrowserWindow } from \"electron\";\n\nconst app = express();\nconst port = process.env.PORT || 3000;\nconst host = process.env.HOST || \"0.0.0.0\";\n\n// Enable CORS for all routes\napp.use(cors());\napp.use(express.json({ limit: \"50mb\" }));\n\n// Initialize config and IPC service\nconst config = new Config();\nconst ipcMainService = new IpcMain(config);\n\n// Track WebSocket clients and their subscriptions\nconst clients = new Map<\n  WebSocket,\n  {\n    chatSubscriptions: Set<string>;\n    metadataSubscription: boolean;\n  }\n>();\n\n// Mock Electron's ipcMain for HTTP\nclass HttpIpcMainAdapter {\n  private handlers = new Map<string, (event: unknown, ...args: unknown[]) => Promise<unknown>>();\n  private listeners = new Map<string, Array<(event: unknown, ...args: unknown[]) => void>>();\n\n  handle(channel: string, handler: (event: unknown, ...args: unknown[]) => Promise<unknown>): void {\n    this.handlers.set(channel, handler);\n\n    // Create HTTP endpoint for this handler\n    app.post(`/ipc/${channel}`, async (req, res) => {\n      try {\n        const args = req.body.args || [];\n        const result = await handler(null, ...args);\n        res.json({ success: true, data: result });\n      } catch (error) {\n        const message = error instanceof Error ? error.message : String(error);\n        console.error(`Error in handler ${channel}:`, error);\n        res.status(500).json({ success: false, error: message });\n      }\n    });\n  }\n\n  on(channel: string, handler: (event: unknown, ...args: unknown[]) => void): void {\n    if (!this.listeners.has(channel)) {\n      this.listeners.set(channel, []);\n    }\n    this.listeners.get(channel)!.push(handler);\n  }\n\n  send(channel: string, ...args: unknown[]): void {\n    const handlers = this.listeners.get(channel);\n    if (handlers) {\n      handlers.forEach((handler) => handler(null, ...args));\n    }\n  }\n}\n\n// Mock BrowserWindow for events\nclass MockBrowserWindow {\n  webContents = {\n    send: (channel: string, ...args: unknown[]) => {\n      // Broadcast to all WebSocket clients\n      const message = JSON.stringify({ channel, args });\n      clients.forEach((clientInfo, client) => {\n        if (client.readyState === WebSocket.OPEN) {\n          // Only send to clients subscribed to this channel\n          if (channel === IPC_CHANNELS.WORKSPACE_METADATA && clientInfo.metadataSubscription) {\n            client.send(message);\n          } else if (channel.startsWith(IPC_CHANNELS.WORKSPACE_CHAT_PREFIX)) {\n            // Extract workspace ID from channel\n            const workspaceId = channel.replace(IPC_CHANNELS.WORKSPACE_CHAT_PREFIX, \"\");\n            if (clientInfo.chatSubscriptions.has(workspaceId)) {\n              client.send(message);\n            }\n          } else {\n            // Send other channels to all clients\n            client.send(message);\n          }\n        }\n      });\n    },\n  };\n}\n\nconst mockWindow = new MockBrowserWindow();\nconst httpIpcMain = new HttpIpcMainAdapter();\n\n// Register IPC handlers\nipcMainService.register(httpIpcMain as unknown as ElectronIpcMain, mockWindow as unknown as BrowserWindow);\n\nconsole.log(\"IPC handlers registered\");\n\n// Serve static files from dist directory (built renderer)\napp.use(express.static(path.join(__dirname, \"../dist\")));\n\n// Health check endpoint\napp.get(\"/health\", (req, res) => {\n  res.json({ status: \"ok\" });\n});\n\n// Fallback to index.html for SPA routes\napp.get(\"*\", (req, res) => {\n  if (!req.path.startsWith(\"/ipc\") && !req.path.startsWith(\"/ws\")) {\n    res.sendFile(path.join(__dirname, \"../dist/index.html\"));\n  }\n});\n\n// Create HTTP server\nconst server = http.createServer(app);\n\n// Create WebSocket server\nconst wss = new WebSocketServer({ server, path: \"/ws\" });\n\nwss.on(\"connection\", (ws) => {\n  console.log(\"Client connected\");\n\n  // Initialize client tracking\n  clients.set(ws, {\n    chatSubscriptions: new Set(),\n    metadataSubscription: false,\n  });\n\n  ws.on(\"message\", (data) => {\n    try {\n      const message = JSON.parse(data.toString());\n      const { type, channel, workspaceId, args } = message;\n\n      const clientInfo = clients.get(ws);\n      if (!clientInfo) return;\n\n      if (type === \"subscribe\") {\n        if (channel === \"workspace:chat\") {\n          console.log(`Client subscribed to workspace chat: ${workspaceId}`);\n          clientInfo.chatSubscriptions.add(workspaceId);\n\n          // Send subscription acknowledgment through IPC system\n          httpIpcMain.send(\"workspace:chat:subscribe\", workspaceId);\n        } else if (channel === \"workspace:metadata\") {\n          console.log(\"Client subscribed to workspace metadata\");\n          clientInfo.metadataSubscription = true;\n\n          // Send subscription acknowledgment\n          httpIpcMain.send(\"workspace:metadata:subscribe\");\n        }\n      } else if (type === \"unsubscribe\") {\n        if (channel === \"workspace:chat\") {\n          console.log(`Client unsubscribed from workspace chat: ${workspaceId}`);\n          clientInfo.chatSubscriptions.delete(workspaceId);\n\n          // Send unsubscription acknowledgment\n          httpIpcMain.send(\"workspace:chat:unsubscribe\", workspaceId);\n        } else if (channel === \"workspace:metadata\") {\n          console.log(\"Client unsubscribed from workspace metadata\");\n          clientInfo.metadataSubscription = false;\n\n          // Send unsubscription acknowledgment\n          httpIpcMain.send(\"workspace:metadata:unsubscribe\");\n        }\n      } else if (type === \"invoke\") {\n        // Handle direct IPC invocations over WebSocket (for streaming responses)\n        // This is not currently used but could be useful for future enhancements\n        console.log(`WebSocket invoke: ${channel}`);\n      }\n    } catch (error) {\n      console.error(\"Error handling WebSocket message:\", error);\n    }\n  });\n\n  ws.on(\"close\", () => {\n    console.log(\"Client disconnected\");\n    clients.delete(ws);\n  });\n\n  ws.on(\"error\", (error) => {\n    console.error(\"WebSocket error:\", error);\n  });\n});\n\nserver.listen(Number(port), host as string, () => {\n  console.log(`\\n🚀 cmux server running at http://${host}:${port}`);\n  console.log(`\\n📱 Access from your iPhone:`);\n  console.log(`   1. Make sure your iPhone and computer are on the same WiFi network`);\n  console.log(`   2. Find your computer's local IP address (run 'ifconfig' or 'ipconfig')`);\n  console.log(`   3. Open Safari on your iPhone and navigate to: http://YOUR_COMPUTER_IP:${port}`);\n  console.log(`\\n🔌 WebSocket endpoint: ws://${host}:${port}/ws`);\n  console.log(`\\n💡 Available IPC endpoints:`);\n  console.log(`   POST /ipc/<channel-name>`);\n  console.log(`   Body: { \"args\": [...] }`);\n  console.log(`\\n`);\n});\n"]}