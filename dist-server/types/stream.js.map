{"version":3,"file":"stream.js","sourceRoot":"","sources":["../../src/types/stream.ts"],"names":[],"mappings":";AAAA;;GAEG","sourcesContent":["/**\n * Event types emitted by AIService\n */\n\nimport type { LanguageModelV2Usage } from \"@ai-sdk/provider\";\nimport type { CmuxReasoningPart, CmuxTextPart, CmuxToolPart } from \"./message\";\nimport type { StreamErrorType } from \"./errors\";\n\n/**\n * Completed message part (reasoning, text, or tool) suitable for serialization\n * Used in StreamEndEvent and partial message storage\n */\nexport type CompletedMessagePart = CmuxReasoningPart | CmuxTextPart | CmuxToolPart;\n\nexport interface StreamStartEvent {\n  type: \"stream-start\";\n  workspaceId: string;\n  messageId: string;\n  model: string;\n  historySequence: number; // Backend assigns global message ordering\n}\n\nexport interface StreamDeltaEvent {\n  type: \"stream-delta\";\n  workspaceId: string;\n  messageId: string;\n  delta: string;\n}\n\nexport interface StreamEndEvent {\n  type: \"stream-end\";\n  workspaceId: string;\n  messageId: string;\n  // Structured metadata from backend - directly mergeable with CmuxMetadata\n  metadata: {\n    model: string;\n    usage?: LanguageModelV2Usage;\n    providerMetadata?: Record<string, unknown>;\n    duration?: number;\n    systemMessageTokens?: number;\n  };\n  // Parts array preserves temporal ordering of reasoning, text, and tool calls\n  parts: CompletedMessagePart[];\n}\n\nexport interface StreamAbortEvent {\n  type: \"stream-abort\";\n  workspaceId: string;\n  messageId: string;\n}\n\nexport interface ErrorEvent {\n  type: \"error\";\n  workspaceId: string;\n  messageId: string;\n  error: string;\n  errorType?: StreamErrorType;\n}\n\n// Tool call events\nexport interface ToolCallStartEvent {\n  type: \"tool-call-start\";\n  workspaceId: string;\n  messageId: string;\n  toolCallId: string;\n  toolName: string;\n  args: unknown;\n}\n\nexport interface ToolCallDeltaEvent {\n  type: \"tool-call-delta\";\n  workspaceId: string;\n  messageId: string;\n  toolCallId: string;\n  toolName: string;\n  delta: unknown;\n}\n\nexport interface ToolCallEndEvent {\n  type: \"tool-call-end\";\n  workspaceId: string;\n  messageId: string;\n  toolCallId: string;\n  toolName: string;\n  result: unknown;\n}\n\n// Reasoning events\nexport interface ReasoningStartEvent {\n  type: \"reasoning-start\";\n  workspaceId: string;\n  messageId: string;\n}\n\nexport interface ReasoningDeltaEvent {\n  type: \"reasoning-delta\";\n  workspaceId: string;\n  messageId: string;\n  delta: string;\n}\n\nexport interface ReasoningEndEvent {\n  type: \"reasoning-end\";\n  workspaceId: string;\n  messageId: string;\n}\n\nexport type AIServiceEvent =\n  | StreamStartEvent\n  | StreamDeltaEvent\n  | StreamEndEvent\n  | ErrorEvent\n  | ToolCallStartEvent\n  | ToolCallDeltaEvent\n  | ToolCallEndEvent\n  | ReasoningStartEvent\n  | ReasoningDeltaEvent\n  | ReasoningEndEvent;\n"]}