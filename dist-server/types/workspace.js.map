{"version":3,"file":"workspace.js","sourceRoot":"","sources":["../../src/types/workspace.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AAExB;;GAEG;AACU,QAAA,uBAAuB,GAAG,OAAC,CAAC,MAAM,CAAC;IAC9C,EAAE,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,0BAA0B,CAAC;IACjD,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,0BAA0B,CAAC;IAC1D,aAAa,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,4BAA4B,CAAC;CAC/D,CAAC,CAAC","sourcesContent":["import { z } from \"zod\";\n\n/**\n * Zod schema for workspace metadata validation\n */\nexport const WorkspaceMetadataSchema = z.object({\n  id: z.string().min(1, \"Workspace ID is required\"),\n  projectName: z.string().min(1, \"Project name is required\"),\n  workspacePath: z.string().min(1, \"Workspace path is required\"),\n});\n\n/**\n * Unified workspace metadata type used throughout the application.\n * This is the single source of truth for workspace information.\n *\n * NOTE: This does NOT include branch name. Branch can be changed after workspace\n * creation (user can switch branches in the worktree), and we should not depend\n * on branch state in backend logic. Frontend can track branch for UI purposes.\n */\nexport interface WorkspaceMetadata {\n  /** Unique workspace identifier (e.g., \"project-branch\") */\n  id: string;\n\n  /** Project name extracted from project path */\n  projectName: string;\n\n  /** Absolute path to the workspace worktree directory */\n  workspacePath: string;\n}\n\n/**\n * UI-facing workspace metadata.\n */\nexport type WorkspaceMetadataUI = WorkspaceMetadata;\n\n/**\n * Git status for a workspace (ahead/behind relative to origin's primary branch)\n */\nexport interface GitStatus {\n  ahead: number;\n  behind: number;\n  /** Whether there are uncommitted changes (staged or unstaged) */\n  dirty: boolean;\n}\n\n/**\n * Frontend-enriched workspace metadata with additional UI-specific data.\n * Extends backend WorkspaceMetadata with frontend-computed information.\n */\nexport interface DisplayedWorkspaceMetadata extends WorkspaceMetadata {\n  /** Git status relative to origin's primary branch (null if not available) */\n  gitStatus: GitStatus | null;\n}\n\n/**\n * Event emitted when workspace metadata changes\n */\nexport interface WorkspaceMetadataUpdate {\n  workspaceId: string;\n  metadata: WorkspaceMetadata;\n}\n"]}