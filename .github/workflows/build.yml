name: Build

on:
  push:
    branches: ["main", "debug-cert-format"]
  pull_request:
    branches: ["**"]
  workflow_dispatch: # Allow manual triggering

jobs:
  build-macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build application
        run: bun run build

      - name: Debug Certificate Format
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.head_ref == 'debug-cert-format')
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          echo "Certificate length: ${#MACOS_CERTIFICATE}"
          echo "First 50 chars: ${MACOS_CERTIFICATE:0:50}"
          echo "Last 50 chars: ${MACOS_CERTIFICATE: -50}"
          echo "Contains newlines: $(echo "$MACOS_CERTIFICATE" | grep -c $'\n' || echo 0)"
          echo "Contains spaces: $(echo "$MACOS_CERTIFICATE" | grep -c ' ' || echo 0)"
          echo ""
          echo "Attempting to decode and check format..."
          if echo "$MACOS_CERTIFICATE" | base64 --decode > /tmp/test.p12 2>&1; then
            echo "✓ Base64 decode successful"
            file /tmp/test.p12
            ls -lh /tmp/test.p12
            echo ""
            echo "Validating PKCS12 format..."
            if openssl pkcs12 -in /tmp/test.p12 -noout -passin pass:"$MACOS_CERTIFICATE_PWD" 2>&1; then
              echo "✓ PKCS12 validation successful"
            else
              echo "✗ PKCS12 validation FAILED"
              echo "Trying with empty password..."
              openssl pkcs12 -in /tmp/test.p12 -noout -passin pass:"" 2>&1 || echo "Also failed with empty password"
            fi
          else
            echo "✗ Base64 decode FAILED"
          fi

      - name: Package for macOS
        run: |
          # Decode certificate to a file and provide the file path to electron-builder
          # This avoids issues with electron-builder's internal base64 decoder
          echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > /tmp/certificate.p12
          export CSC_LINK="/tmp/certificate.p12"
          export CSC_KEY_PASSWORD="${{ secrets.MACOS_CERTIFICATE_PWD }}"
          export CSC_FOR_PULL_REQUEST="${{ github.event_name == 'pull_request' && github.head_ref == 'debug-cert-format' && 'true' || '' }}"
          bun run dist:mac

      - name: Upload macOS DMG
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: release/*.dmg
          retention-days: 30
          if-no-files-found: error

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build application
        run: bun run build

      - name: Package for Linux
        run: bun run dist:linux

      - name: Upload Linux AppImage
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: release/*.AppImage
          retention-days: 30
          if-no-files-found: error
